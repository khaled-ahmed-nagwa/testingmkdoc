{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nagwa Documentation :material-information-outline:{ title=\"In Progress\" }","text":"<p>Warning</p> <p>If you wish to access diagrams, you must verify your identity by logging in with your work email ending with '@nagwa.com' Once logged in, you will have access to view the diagrams.</p>"},{"location":"#who-should-read-this-documentation","title":"Who Should Read This Documentation?","text":"<p>This documentation provides a concise business and technical overview of several Nagwa products. It is designed for a diverse audience, including new developers joining the development team, top management executives, product business managers, and content technologies teams at Nagwa Technologies. Whether you're interested in the technical aspects or a business perspective, this document will provide valuable insights into how Nagwa is transforming education.</p> <p>Check Out Our Documentation Site</p>"},{"location":"#evaluation","title":"Evaluation","text":"Loading\u2026"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/09/10/this-blog-to-test-long-blog-/","title":"This Blog To Test Long Blog \ud83e\uddea","text":"<p>As our documentation projects grow in size, using a single Google Docs file is becoming inefficient. It's challenging for readers to navigate lengthy documents, and tracking changes may become problematic</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nunc non blandit massa enim nec dui nunc. Commodo nulla facilisi nullam vehicula ipsum a arcu cursus. In vitae turpis massa sed elementum tempus egestas sed sed. Neque vitae tempus quam pellentesque nec nam. In hac habitasse platea dictumst. Turpis in eu mi bibendum neque egestas congue quisque egestas. Consequat interdum varius sit amet mattis vulputate. In hac habitasse platea dictumst quisque sagittis purus sit. Elementum eu facilisis sed odio morbi quis commodo odio. Ac tortor vitae purus faucibus ornare. Pellentesque habitant morbi tristique senectus et. Fermentum iaculis eu non diam phasellus. In ornare quam viverra orci sagittis eu. Sit amet commodo nulla facilisi nullam vehicula ipsum. Urna duis convallis convallis tellus id interdum velit laoreet. In tellus integer feugiat scelerisque varius morbi. Egestas sed sed risus pretium quam vulputate dignissim suspendisse. Vestibulum sed arcu non odio euismod lacinia.</p> <p>Vestibulum sed arcu non odio. Mauris a diam maecenas sed. Sit amet consectetur adipiscing elit ut aliquam purus. Eget est lorem ipsum dolor sit amet consectetur adipiscing. Viverra justo nec ultrices dui sapien eget mi proin. Egestas congue quisque egestas diam in arcu cursus euismod. Urna porttitor rhoncus dolor purus. Dictum non consectetur a erat nam. Pharetra convallis posuere morbi leo urna molestie at elementum. Risus nullam eget felis eget nunc lobortis mattis aliquam faucibus. Sociis natoque penatibus et magnis dis parturient montes nascetur. In massa tempor nec feugiat nisl pretium.</p> <p>Mauris in aliquam sem fringilla. Ut porttitor leo a diam. Facilisis gravida neque convallis a cras semper auctor. Mauris rhoncus aenean vel elit scelerisque mauris pellentesque pulvinar. At erat pellentesque adipiscing commodo elit. Mi ipsum faucibus vitae aliquet nec ullamcorper sit. Mi tempus imperdiet nulla malesuada pellentesque elit eget gravida. Ultrices tincidunt arcu non sodales neque sodales ut etiam sit. Tellus orci ac auctor augue mauris augue neque gravida in. A arcu cursus vitae congue mauris rhoncus.</p> <p>Cursus sit amet dictum sit amet justo. Tellus in hac habitasse platea dictumst vestibulum rhoncus. Tristique magna sit amet purus gravida quis blandit turpis. Velit aliquet sagittis id consectetur purus ut faucibus. Ut pharetra sit amet aliquam id diam. Adipiscing commodo elit at imperdiet dui accumsan sit amet nulla. Non enim praesent elementum facilisis leo vel fringilla. Hac habitasse platea dictumst vestibulum rhoncus est pellentesque elit ullamcorper. Suspendisse potenti nullam ac tortor. Quisque non tellus orci ac. Consequat mauris nunc congue nisi vitae suscipit tellus mauris a. Pulvinar proin gravida hendrerit lectus a. Fames ac turpis egestas integer eget aliquet nibh. Nisl nisi scelerisque eu ultrices. In ante metus dictum at. Volutpat ac tincidunt vitae semper quis lectus nulla at. Tortor condimentum lacinia quis vel eros donec ac odio tempor. </p>"},{"location":"nagwa_sessions/","title":"Nagwa Session (For Educators) \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb","text":""},{"location":"nagwa_sessions/#project-overview","title":"Project Overview","text":"<p>Nagwa's primary objective is the enhancement of education through interactive and engaging learning experiences for students. The Nagwa Sessions app serves as a platform designed to empower educators to conduct live online teaching sessions effectively, equipped with a comprehensive set of tools that facilitate optimal session delivery. We are confident that the Nagwa Sessions app possesses all the essential components required to foster interactive online teaching. This is achieved by fostering ongoing student engagement in the learning process, facilitated through the seamless sharing of questions and active participation.</p>"},{"location":"nagwa_sessions/#objective","title":"Objective","text":"<p>Our main goal is to change education for the better through a new educational platform. We want this app to help educators by giving them many different tools to improve online teaching. This will help to create teaching and learning experiences that are educational and meaningful. We also want to make sure that this app is easy to use, providing educators with all the tools they need to teach effectively online.</p>"},{"location":"nagwa_sessions/#target-audience","title":"Target Audience","text":"<p>The Nagwa Sessions app is specifically tailored to be used by educators who will deliver live online sessions with class students via the Nagwa Classes mobile app.</p>"},{"location":"nagwa_sessions/#tools-used","title":"Tools Used","text":"<ul> <li>Dart and Flutter</li> <li>Firebase</li> <li>Agora for voice and chat messages</li> <li>Different packages that support bloc pattern, local storage, responsive UI, localization, chat, connection status, form validation, etc.</li> </ul>"},{"location":"nagwa_sessions/key_features/","title":"Nagwa Sessions: Key Features","text":""},{"location":"nagwa_sessions/key_features/#diagram","title":"Diagram","text":"Main Session Features Diagram"},{"location":"nagwa_sessions/key_features/#key-features","title":"Key Features","text":""},{"location":"nagwa_sessions/key_features/#authentication","title":"Authentication","text":""},{"location":"nagwa_sessions/key_features/#login","title":"Login","text":"<ul> <li>Educators can log in easily using their email and password.</li> <li>When educators try to log in for the first time after receiving the email from the portal admin, they will be prompted to set a password. This password will become their permanent account password.</li> </ul>"},{"location":"nagwa_sessions/key_features/#reset-password","title":"Reset Password","text":"<ul> <li>If an educator forgets their password, they can only reset it by contacting the portal administrator, who will assist in resetting the password for them.</li> </ul>"},{"location":"nagwa_sessions/key_features/#session-feature","title":"Session Feature","text":""},{"location":"nagwa_sessions/key_features/#sessions-overview","title":"Sessions Overview","text":"<ul> <li>Educators can view a clear listing of ongoing and upcoming sessions.</li> <li>Session details include start time, duration, and the number of enrolled students.</li> <li>Once the session's start time arrives, educators can initiate it, and students can join.</li> <li>Educators have the option to cancel the session before starting it. This action removes the session from the list of the upcoming sessions.</li> <li>Educators have the authority to end sessions at any time. This action removes participants and the session from the list.</li> </ul>"},{"location":"nagwa_sessions/key_features/#interactive-question-engagement","title":"Interactive Question Engagement","text":"<p>One of the primary and powerful tools within the session is interactive question sharing and answering. Educators can share pre-designed questions with their students, fostering active participation. Students directly respond within the drawing area, indicating their choices. This enables educators to access insightful responses from students instantly.</p> <ul> <li>Before the session starts, the educator needs to prepare the session material which includes the questions along with the slides.</li> <li>Educators can share a variety of question types and students can answer in real time.</li> <li>Educators retain control over student engagement with the question, with the capability to start or stop students from answering at any moment.</li> <li>The app displays students' answers in real-time, along with a live count of students who haven't answered the question yet.</li> <li>Once the educator ends the question answering state, they can view comprehensive insights into student answers. This information can then be shared with the students, fostering a deeper understanding of the collective response.</li> </ul>"},{"location":"nagwa_sessions/key_features/#live-drawing","title":"Live Drawing","text":"<p>Educators can utilize live drawing features, allowing them to draw on the screen in real time. These drawings are instantly shared with the students. Educators have access to various drawing tools, enabling them to use different pens, colors, and thickness options.</p> <ul> <li>Educators have the flexibility to undo, redo, reset, and erase drawings, ensuring a smooth and interactive teaching process.</li> <li>Educators have the freedom to choose from a variety of colors and thickness options when drawing on the screen.</li> </ul> <p>Only Apple Pencils Are Supported \u270f\ufe0f</p> <p>Currently, the ability to draw is limited to the use of an Apple Pencil. This means that educators can only make drawings using an Apple Pencil and no other method is available.</p>"},{"location":"nagwa_sessions/key_features/#communication-channels","title":"Communication Channels","text":""},{"location":"nagwa_sessions/key_features/#voice-communication","title":"Voice Communication","text":"<ul> <li>The educator can speak directly to students using voice. He can mute or unmute their microphone as needed.</li> <li>The student can communicate using voice, but first, he needs to obtain permission from the educator, The educator can revoke (mute) speaking permission at any time.</li> </ul> <p> Raising Hands  \ud83d\ude4b </p> <p>Students can signal their desire to participate by raising their hands, indicating their intention to speak. Once a student raises their hand, they request permission to speak. The educator is then notified of the student's request and can decide whether to grant or deny permission for the student to speak. If permission is granted, the student can unmute their microphone and engage in verbal communication with the educator.</p>"},{"location":"nagwa_sessions/key_features/#text-message","title":"Text Message","text":"<ul> <li>Students can send messages in the live chat, which can be read by the educator. However, The educator do not have the ability to send text messages in the chat.</li> </ul> <p>Text Messages Feature Can Be Disabled \u274c</p> <p>The educator has the ability to enable or disable the text chat feature. When this functionality is disabled, no one can send a text message.</p>"},{"location":"nagwa_sessions/key_features/#handling-internet-connection-issues","title":"Handling Internet Connection Issues","text":"<p>We understand the importance of keeping educators informed about any network issues that may impact the student experience. To ensure this, educators receive notifications for internet connection issues. The app also makes continuous attempts to reconnect educators to the session, minimizing any disruption.</p>"},{"location":"nagwa_sessions/key_features/#block-students","title":"Block Student/s","text":"<p>Educators have the ability to block specific students from the session. This action immediately removes the student from the session and prevents them from re-entering.</p>"},{"location":"nagwa_sessions/key_features/#multiple-accounts","title":"Multiple Accounts","text":"<p>The Educator can register multiple accounts in the app, and switch between them when needed.</p>"},{"location":"nagwa_sessions/key_features/#time-reminder","title":"Time Reminder","text":"<p>Educators can view a timer that displays the session duration, indicating the time since the session started. As the session approaches its end (last hour), the timer turns into a red timer and starts indicating the remaining time.</p>"},{"location":"nagwa_sessions/authentication/","title":"Authntication Process","text":"<p>Authentication is a crucial aspect of our system, providing educators with secure and streamlined access to the Nagwa Sessions app. Here's an overview of the process:</p> <ul> <li>Account Registration: The registration process is done through our portal. When a new educator signs a contract with Nagwa, the team will create an account for him and provide him with a login email.</li> <li>Initial Login: Educators can log in to the app for the first time. using their registered email that was provided by the portal administrator.</li> <li>Upon initial login, educators are prompted to set a new password, replacing the initial one. This new password becomes the account password.</li> <li>For the next login, educators simply enter their email and account password, after that, they will be routed to the session listing page.</li> </ul> <p>This authentication process ensures the security of educator accounts while offering a user-friendly experience, allowing educators to access the app effortlessly.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/getSavedUsersLocally/","title":"Getting Stored Users Locally","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/getSavedUsersLocally/#function-flowchart","title":"Function Flowchart","text":"<code>getSavedUsers</code> Function Flowchart The <code>getSavedUsers</code> Function Path <p>the <code>getSavedUsers</code> is located at the <code>lib/features/authentication/data/local/data_sources/authentication_local_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/getSavedUsersLocally/#getsavedusers-function-return","title":"<code>getSavedUsers</code> Function Return","text":"Function Return                  List of <code>UserEntity</code> objects that contains:                 <ul> <li>userID</li> <li>portalId</li> <li>username</li> <li>firstName</li> <li>lastName</li> <li>status</li> <li>roles</li> <li>phoneNumber</li> <li>countryPhoneCode</li> <li>language</li> <li>country</li> <li>portalType</li> <li>imageUrl</li> <li>portalCurrency</li> <li>portalTimeZone</li> </ul>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/","title":"Login Process: Validating Username","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/#process-overview","title":"Process Overview","text":"<p>After logging into the application, the user will be routed to the username (email) input screen. This is the first screen that the user sees when they open the app for the first time or after logging out. The page asks the user to enter their username, and after clicking the <code>Continue</code> button, it will check the validity of the entered username.</p> <ul> <li>If the entered username is not registered to the app, an error message will be displayed informing the user that the email is not registered on the portal.</li> <li>If a student username was entered, an error message will be shown indicating that this account is not authorized to access the app.</li> <li>If the account is already logged in to the app, an alert dialog will be shown that asks the educator if he wants to switch to that account.</li> </ul> <p>Checking If User Exsits \ud83d\udd0d ?</p> <p>Checking if an account exists on a local device is done by calling the <code>isUserExistByUsername</code> method, which checks the local storage (Hive) for the entered username.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/#username-verification-function-flowchart","title":"Username Verification Function Flowchart","text":"Username Verification Flowchart \ud83d\udc68\u200d\ud83d\udcbb <code>usernameLogin</code> Function Variable Parameters Type Function Required Parameters <code>username</code> String Function Return Parameters          - <code>portalID</code>         - <code>userID</code>         - <code>needPasswordReset</code>         - <code>resetToken</code>         - <code>isPhoneVerified</code>         - <code>status</code>         - <code>roles</code>          String         int         Bool         String         Bool         int         List of Strings"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/#username-verification-api","title":"Username Verification API","text":"API Endpoint Details Category Name Data Type API Endpoint users/verification API Query Parameters username HTTP Method GET API Response result A list that contains the following  - portalID int - userID int - needPasswordReset bool - resetToken string - isPhoneVerified bool - status int - roles list - accountStatus String - suffix String - portalType int <p>Allowed Roles to Access The Application</p> <p>You may have noticed that the username verification API returns a 'roles' list. This list contains the roles associated with the username within the portal. Currently, the allowed roles are limited to <code>' teacher', 'tutor', and 'assistant'</code> Any other role will not grant access to continue logging into the application.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/#login-screenshots","title":"Login Screenshots","text":"Inserting Username Screen Different Validation Messages"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataLocally/","title":"Saving User Data Locally","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataLocally/#function-flowchart","title":"Function Flowchart","text":"Saving Data Locally Flowchart The <code>saveUsers</code> Function Path <p>The <code>saveUsers</code> is located at the <code>lib\\features\\authentication\\data\\local\\data_sources\\authentication_local_data_source_impl.dart</code> path.</p> Saving User Data Locally Function Required Parameter <code>users</code> [list of UserEntitiy Objects that need to be saved] Function Return <code>Bool</code> [Spacify whether the save is done or not]"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataProcess/","title":"Saving User Data Locally","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataProcess/#process-steps","title":"Process Steps","text":"<p>To save the user information to local storage, we are using <code>Hive</code> to store the information locally.</p> <pre><code>1. we first use the `getSavedUsers` function to retrieve the stored users locally\n2. Call the `verifyUsername` function from the remote data source to get the list of users that have the same username and password\n3. Add the users from the API response to the users from the local data source, then remove the duplicates from the list of users\n4. Check the index of the user that should be the first user in the list and if it is not the first user, we remove it from the list and add it to the first index\n5. Save the list of users in the local data source\n</code></pre>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataProcess/#getsaveduser","title":"GetSavedUser","text":"<p>The <code>getSavedUsers</code> is used to get the saved users from the local database and return it as a list of UserEntity objects, It uses Hive to open the box and get the user objects from it, and then it converts the user object to a list of UserEntity objects. and returns it.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataProcess/#saveusers","title":"SaveUsers","text":"<p>The <code>saveUsers</code> is used to save the users in the local database, it uses Hive to open the box and save the user object in it. It converts the user's object to a list of JSON objects saves it in the box. and returns true if the process is done successfully. </p> <p>More information is coming in the next section regarding how we store and retrieve user's data locally.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/settingPassword_firstTime/","title":"Setting Password For The First Time 1\ufe0f\u20e3","text":"<p>When an educator logs into the application for the first time after registering, they will need to enter their email address and initial password. Once their email address and password are verified, they will be prompted to create a new password that will become their account password.</p> Setting Password For the First Time Screen <p></p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/settingPassword_firstTime/#setting-password-api","title":"Setting Password API","text":"Resetting Password API API Endpoint <code>users/reset-password-confirmation</code> HTTP Method <code>POST</code> API Required Data <code>token</code> <code>password</code>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/","title":"Login Process (Validating Password)","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#overview","title":"Overview","text":"<p>After ensuring the existence &amp; authentication of the username in the previous step, the educator will be routed to insert his account password</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#inserting-password-screenshots","title":"Inserting Password Screenshots","text":"Inserting Password Screenshot Incorrect Password Error \u26a0\ufe0f Screenshot"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#flowchart","title":"Flowchart","text":"Verify Username &amp; Password Function Flowchart"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#verify-username-password-api","title":"Verify Username &amp; Password API","text":"Verify Username &amp; Password API API Endpoint <code>users/login</code> HTTP Method <code>POST</code> API Required Data <ul> <li><code>loginName </code> </li> <li><code>password</code> </li> <li><code>portalId</code> </li> </ul> API Response <code> result</code>  list that contains the following:       <ul> <li><code>portalID </code> </li> <li><code>code</code> </li> <li><code>userName</code> </li> <li><code>firstName</code> </li> <li><code>lastName</code> </li> <li><code>accountStatus</code> </li> <li><code>status</code> </li> <li><code>country</code> </li> <li><code>language</code> </li> <li><code>phoneNumber</code> </li> <li><code>dialCode</code> </li> <li><code>roles</code> </li> </ul>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#verifyusername-function","title":"<code>verifyUsername</code> Function","text":"verifyUsername Function Function Required Parameters <ul> <li>userId</li> <li>username</li> <li>password</li> <li>portalId</li> </ul> <ul> <li>Int</li> <li>String</li> <li>String</li> <li>Int</li> </ul> Function Return Parameters              List of `UserEntity` Object that contain             <ul> <li>userID</li> <li>portalId</li> <li>username</li> <li>firstName</li> <li>lastName</li> <li>status</li> <li>roles</li> <li>phoneNumber</li> <li>countryPhoneCode</li> <li>language</li> <li>country</li> <li>portalType</li> <li>imageUrl</li> <li>portalCurrency</li> <li>portalTimeZone</li> </ul>              List of Objects             <ul> <li>Int</li> <li>Int</li> <li>String</li> <li>String</li> <li>String</li> <li>Int</li> <li>List</li> <li>String</li> <li>String</li> <li>String</li> <li>String</li> <li>Int</li> <li>String</li> <li>String</li> <li>String</li> </ul> <code>verifyUsername</code> Function Path <p>The <code>verifyUsername</code> is located at the <code>lib/features/authentication/data/remote/data_sources/authentication_remote_data_source_impl.dart</code> path.</p> <p>You can notice that inside the <code>verifyUsername</code> function, a call to the <code>_getUserPortalInfo</code> function is made to retrieve the full list of the user portal information.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#get-user-portal-information-api","title":"Get User Portal Information API","text":"Get User Portal Information API Field Description API Endpoint user/UserInfo/$userId HTTP Method GET API Headers api-version: 1 API Response result (containes the following) portalInfo A list that contains the following:                  <ul> <li>portalId</li> <li>clusterId</li> <li>title</li> <li>subtitleLanguage</li> <li>language</li> <li>country</li> <li>countryTitle</li> <li>logoExtension</li> <li>logoURL</li> <li>videosSubtitle</li> <li>timeZone</li> <li>timeZoneDisplayName</li> <li>isActive</li> <li>priceCountry</li> <li>portalCurrency</li> <li>isPaid</li> <li>type</li> <li>nextType</li> <li>pricePerStudent</li> </ul> userInfo A list that contains the following:                 <ul> <li>portalID</li> <li>code</li> <li>userName</li> <li>firstName</li> <li>lastName</li> <li>accountStatus</li> <li>status</li> <li>country</li> <li>language</li> <li>phoneNumber</li> <li>countryPhoneCode</li> <li>roles</li> </ul> Response From the <code>user/UserInfo/$userId</code> API <pre><code>    {\n      \"success\": true,\n      \"resultCode\": 200,\n      \"errorCode\": null,\n      \"result\": {\n          \"portalInfo\": {\n              \"portalId\": 129139714843,\n              \"clusterId\": 0,\n              \"title\": \"Nagwa Classes\",\n              \"subtitleLanguage\": null,\n              \"language\": \"ar\",\n              \"country\": \"eg\",\n              \"countryTitle\": \"\u0645\u0635\u0631\",\n              \"logoExtension\": \".png\",\n              \"logoURL\": \"https://s3.amazonaws.com/files-portals.nagwa.com/images/portals-logo/129139714843.png\",\n              \"videosSubtitle\": null,\n              \"timeZone\": \"Arab Standard Time\",\n              \"timeZoneDisplayName\": \"(UTC+03:00) Arabian Standard Time (Riyadh)\",\n              \"isActive\": \"1\",\n              \"priceCountry\": \"eg\",\n              \"portalCurrency\": \"EGP\",\n              \"isPaid\": false,\n              \"type\": 4,\n              \"nextType\": null,\n              \"pricePerStudent\": 20.00\n          },\n          \"userInfo\": {\n              \"portalID\": 129139714843,\n              \"code\": 496182456783,\n              \"userName\": \"teacher.dina.ali@gmail.com\",\n              \"firstName\": \"Teacher Dina\",\n              \"lastName\": \"Ali\",\n              \"accountStatus\": \"Active\",\n              \"status\": 1,\n              \"country\": \"eg\",\n              \"language\": \"ar\",\n              \"phoneNumber\": null,\n              \"countryPhoneCode\": null,\n              \"gradeId\": 0,\n              \"token\": null,\n              \"roles\": [\n                  \"Teacher\"\n              ]\n          }\n      },\n      \"errors\": []\n  }\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/","title":"Pre-Knowledge Required Before Technical Dealing With Sessions","text":"<p>As you may be aware, we seamlessly integrate various services and tools to enhance the experience of conducting live sessions between instructors and students. It's essential to take a closer look at these tools before diving deep into the session features.</p> Are you willing to skip this section  \ud83d\ude44  <p>If you're a developer eager to expand your knowledge of the session feature, it's highly recommended to dive into this section. It will equip you with a thorough understanding of various aspects related to the session feature. Keep in mind that the definitions presented here won't be repeated in the following sections, so it's essential to grasp them here.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/agoraDetails/","title":"Agora","text":""},{"location":"nagwa_sessions/pre_knowledge_required/agoraDetails/#signaling-overview","title":"Signaling Overview","text":"<p>A message is broadcast to all users in the same channel when a user sends a message. The message structure is as follows: {n: user full name, m: user message}, The n field represents the full name of the user who sent the message, while the m field contains the actual message content. To manage the messages and actions, we have two channels </p> <ol> <li>Messages Channel: Used for transferring chat messages, its name should be <code>ChatChannel:${currentSessionCredential.sessionId}</code>.</li> <li>Actions Channel: Used for transferring actions, its name should be <code>ActionsChannel:${currentSessionCredential.sessionId}</code>.</li> </ol>"},{"location":"nagwa_sessions/pre_knowledge_required/agoraDetails/#agora-actions-numbers","title":"Agora Actions Numbers","text":"Action Number Action Description 1 The student raised his hand in order to seek permission to speak   2 Educator unmuted a student with ID  3 The educator muted student with ID. 4 The educator ended the session 5 Educator away, meaning that he is having internet connection issues or   left the session  6 The educator is now back  7 willTerminateApp 8 Reset session to normal state by resetting speaking and raising hand actions if a student was speaking and had a connection problem or if the educator left and came back 12 The student muted himself, it\u2019s sent by the student  13 The student unmuted himself; it's sent by the student 14 The eductor kicked out students from the session 15 Indicates that the educator has an active account and is currently running the session on another device."},{"location":"nagwa_sessions/pre_knowledge_required/agoraDetails/#agora-voice-call-rtc","title":"Agora Voice Call (RTC)","text":"<p>To provide the educator with real-time voice communication with the students, we first set the user-needed credentials, We pass the current session credential and the user ID of the active user to the <code>setSessionCredential</code> method of the <code>voiceCallCubit</code>. This allows the voice call feature to authenticate the user and establish a connection for the session.</p> <p>By default, when an educator joins a session, permission is requested from him to allow microphone access. Once permission is granted,  his microphone becomes open and he has the flexablilty to turn it off /on.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/fetching_engine/","title":"Fetching HTML Rendering Engine","text":"<p>When an educator log with his account into the application, a function is called to check if the engine exsist locally or not. If not, the engine is downloaded in the background. So in the case of an educator who has started a session immediately after installing the application, a download progress bar is displayed, and he will need to wait for the download to finish before he can start the session.</p> <p>The engine is only downloaded once and stored in local storage.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/fetching_engine/#fetch-all-engines-list","title":"Fetch All Engines List","text":"<p>To retrieve a list of engines, we use the <code>getEngineDetails</code> function. This function makes an HTTP GET request to our <code>Engines/GetAll</code>  API endpoint to retrieve a list of engine details. The function returns the results as a list of \u201cEngineDetailsEntity\u201d objects that containes the name and md5 of engines.  </p> <p>The list which returned from <code>Engines/GetAll</code> endpoint does not include the URL to download the engine, so we need to find a way to get this URL.</p> Fetch All Engines API API Endpoint <code>Engines/GetAll</code> HTTP Method <code>Get</code> API Respone  A List that containes:  -  <code>name</code>  - <code>md5</code> Fetching List of All Engines Flowchart <p></p> <code>getEngineDetails</code> Function Path <p>The <code>getEngineDetails</code> function is located at the <code>lib/features/sessions/data/data_sources/engine/engine_remote_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/fetching_engine/#fetching-single-engine-details","title":"Fetching Single Engine Details","text":"<p>After fetching a list of all engines, we need to get the URL of a specific engine. To do this, we use the <code>getEngine</code> function to call the <code>Engines/GetEngine</code> API endpoint. We provide the engine name as a parameter to the function, and the function returns the URL of the engine.</p> Fetch Single Engine API API Endpoint <code>Engines/GetEngine</code> HTTP Method <code>GET</code> Query Parameter <code>name</code> API Response <code>name</code><code>url</code><code>md5</code> Fetching Details of a Single Engine Flowchart  <p></p> <code>getEngine</code> Function Path <p>The <code>getEngine</code> function is located at the <code>lib/features/sessions/data/data_sources/engine/engine_remote_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/handlingAgora/","title":"Handling Voice Calls, Actions, and Text Chat","text":""},{"location":"nagwa_sessions/pre_knowledge_required/handlingAgora/#agora-overview","title":"Agora Overview","text":"<p>Agora Real-time messages Signaling (Was RTM) and Agora Voice Calls are two components of the Agora platform used for facilitating communication in real-time virtual learning environments</p>"},{"location":"nagwa_sessions/pre_knowledge_required/handlingAgora/#agora-voice-call","title":"Agora Voice Call","text":"<p>It enables the transfer of audio in real-time during online sessions. It allows participants, such as students and teachers, to engage in voice-based communication seamlessly.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/handlingAgora/#agora-signaling-agora-rtm-real-time-messages","title":"Agora Signaling (Agora RTM - Real-time messages)","text":"<p>communication protocol designed for facilitating chat messages and interactive actions in real-time virtual learning environments. It enables the transfer of text-based messages and supports various actions to enhance engagement and manage the session effectively. These actions include:</p> <ul> <li>Student Hand Raise: Students can virtually raise their hands, signaling their desire to speak or ask questions, and the teacher receives notifications.</li> <li>Educator Audio Control: Educators can mute or unmute students' audio streams.</li> <li>Student Self-Mute/Unmute: Students can self-mute or unmute when granted permission by the educator.</li> <li>Disconnection/Reconnection Detection: Agora includes mechanisms to detect when educators or students disconnect or reconnect.</li> <li>Educator Student Removal: Educators have the authority to remove a student from the session when necessary.</li> </ul> <p>Agora RTM was the previous name for Agora Signaling, so when we refer to Agora Signaling or RTM, they are essentially the same.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/handlingAgora/#referance","title":"Referance","text":"<p>For more information about Agora, check out the official SDK documentation:</p> <ul> <li>RtmClient | Signaling (previously RTM) SDK.</li> <li>Agora API Overview.</li> <li>Agora SDK.</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/","title":"HTML Rendering Engine","text":"<p>To support the drawing/handling actions functionality while conducting the session, we depend on our customized \u201cHTML Rendering Engine\u201d. The rendering engine is responsible for displaying drawings, visualizations, activities, and questions within the application.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/#main-features","title":"Main Features","text":"<ol> <li>Drawing Tools: Educators have access to a range of drawing tools, including various colors and sizes for creating visuals.</li> <li>Undo, Redo, and Reset: Educators can undo or redo actions while drawing or editing, and they can also reset the canvas to its original state.</li> <li>Clear Screen: A simple option to clear the canvas and return to the default settings</li> <li>Question Engine Support: The engine is capable of rendering and displaying questions for students to answer.</li> <li>Activities Engine Support: Interactive activities can be rendered by the engine, allowing users to participate actively.</li> <li>Firebase Data Syncing: The engine seamlessly syncs data with the Firebase platform, ensuring efficient data management.</li> </ol>"},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/#main-technologies-used","title":"Main Technologies Used","text":"<p>The HTML rendering engine is built using:</p> <ul> <li>React</li> <li>Redux Toolkit</li> <li>Firebase</li> <li>Webpack</li> <li>Babel.</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/#engine-main-function","title":"Engine Main Function","text":"Main Events &amp; Functions Description <code>NagwaRenderingEngine.updateScreen('SCREEN_ID')</code> Call this function if you want to update the currently active screen and ensure that the changes are                 also updated in Firebase. <code>NagwaRenderingEngine.changeTool({color: 'red',strokeWidth: 3,})</code> Call this function to update the currently active tool or pen with a new color, size, or type and                 start using it inside the app view. The function takes an object as a parameter that may contain any                 of these three properties: color, strokeWidth, type. Type can contain [Draw, DeletePart, or Normal.]              <code>NagwaRenderingEngine.undo()</code> This function allows you to perform an undo action for your last action and remove it within the                 application. By calling the undo() function, you can effortlessly revert the most recent action and                 continue undoing previous actions if necessary. <code>NagwaRenderingEngine.redo()</code> This function enables you to redo your last undo action and retrieve it. With the help of our redo                 stack, which tracks all your undo actions during the current session, you can perform multiple redo                 actions as needed. Restoring changes that were previously undone becomes effortless. <code>NagwaRenderingEngine.clearScreen()</code> Call the clearScreen() function to clear the entire current screen view. Important to note that                 executing this action will remove all content, including drawings and images, from the current                 screen. <code>NagwaRenderingEngine.agoraStarted()</code> Call this function to send a message to the engine indicating that Agora has started. This action                 will trigger the agoraStarted message. <code>NagwaRenderingEngine.updateChatStatus(false||true);</code> Use this function if you want to update the chat status and enable or disable it. By calling this                 function with false, you can disable the chat feature, and with true, you can enable it again. NagwaRenderingEngine.updateCurrentQuestionAskingStatus('value'); Use this function if you want to update the current question status to be whether Initial,                 In_Progress, or Time_Is_Up."},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/#engine-main-events","title":"Engine Main Events","text":"Engine Events Description <code>engineLoaded</code> This event will be fired when the engine is fully loaded and ready for use. It serves as an indication that all necessary components have been initialized, and you can now start interacting with the engine and its functionalities. <code>currentScreenUpdated</code> This event will be fired whenever the current screen receives new data from Firebase and is updated accordingly. This event serves as a notification that the screen content has changed, allowing you to synchronize your view with the latest data received from Firebase. <code>interactionUpdated</code> This event will be fired when the current screen receives new interaction data from Firebase. Use this event to update your view and provide an interactive user experience. <code>drawingToolsUpdated</code> This event is fired when the current screen receives new drawing tools data from Firebase. <code>questionAskingStatusUpdated</code> This event will be fired when the questionAskingStatus status is updated. <code>agoraStarted</code> This event will be fired when the Agora starts. <code>chatStatusUpdated</code> This event will be fired when the chat status is updated. <code>historyStatusUpdated</code> This event will be fired when the history status is updated, used to handle empty undo/redo stacks. <code>logMsg</code> This event will be fired when the engine has new logs. Want to Learn More ! \ud83e\udd29 <p>If you're eager to explore more about the HTML rendering engine, please navigate to the next page, which contains comprehensive details about the engine, along with a comprehensive list of examples showcasing its events and functions.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/","title":"Complete Guide - HTML Rendering Engine","text":"<p>The Rendering Engine is a powerful tool that enables the creation and display of drawings, visualizations, activities, and questions. The engine is used with the \"Nagwa Classes\" app to support the \"session\" feature.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#key-features-of-the-html-rendering-engine","title":"Key Features of the HTML Rendering Engine","text":"<ul> <li>Draw using different colors and sizes with easy-to-use tools.</li> <li>Easily undo or redo changes to perfect your creations.</li> <li>Quickly clear the canvas for a fresh start.</li> <li>Engage users with interactive questions with Question Engine Support.</li> <li>Keep the audience interaction with exciting activities supported by the Activities Engine.</li> <li>Keep data in sync with Firebase for real-time collaboration and accessibility.</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#main-technologies","title":"Main Technologies","text":"<ul> <li>React: The foundation of the Rendering Engine, providing a dynamic user interface.</li> <li>Redux Toolkit: Empowers efficient state management for a smooth user experience.</li> <li>Firebase: Enables real-time data synchronization and storage in the cloud.</li> <li>Wepack: Bundles and optimizes the application for improved performance.</li> <li>Babel: toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#list-of-our-s3-buckets","title":"List of Our S3 Buckets","text":"<ul> <li>nagwa-sessions-dev for the beta engine build</li> <li>nagwa-sessions-prod for the production engine build</li> <li>visualizations.nagwa.com/rendering-engine-packages for the engine package</li> <li>visualizations.nagwa.com/rendering-engine for the demo app</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#how-to-use-the-engine","title":"How to use the engine","text":""},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#initialization","title":"Initialization","text":"<p>In the following example, you will find a code snippet that initializes the rendering engine to establish a connection with the session Firestore and retrieve all the necessary data. Additionally, you'll download the session package to initiate your session smoothly.</p> <pre><code>window.NagwaRenderingEngine.init({\n    name: 'Mohamed Ahmed Mahmoud',\n    role: 'educator', // the role of the current user to preview whether `educator` or `student`\n    rootElementID: 'root', // the id of the root element to render the engine inside it and if not passed it will be `root`\n    userID: '', // the current user id\n    sessionID: '347817452421322', // the current session id\n    packageBasePath: '/347817452421322', // the base path of the package to download the package\n    enginesBasePath: '/engines_base_path', // the base path of the engines\n    firebaseConfig: {\n        apiKey: 'API KEY',\n        authDomain: 'AUTH DOMAIN',\n        projectId: 'PROJECT ID',\n        storageBucket: 'STORAGE BUCKET',\n        messagingSenderId: 'MESSAGING SENDER ID',\n        appId: 'APP ID',\n    },\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#engine-api","title":"Engine API","text":""},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#updatescreenscreenid","title":"updateScreen(screenID)","text":"<p>You need to call this function if you want to update the currently active screen and ensure that the changes are also updated in Firebase.</p> <pre><code>NagwaRenderingEngine.updateScreen('SCREEN_ID');\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#changetooltool","title":"changeTool(tool)","text":"<p>To update the currently active tool or pen with a new color, size, or type and start using it inside the app view, call this function. The function takes an object as a parameter that may contain any of these three properties:</p> <ul> <li><code>color</code>: pass a string with the color of the pen you want to apply.</li> <li><code>strokeWidth</code>:pass a number the with stroke size of the pen you want to apply.</li> <li><code>type</code>: pass the type of pen you need whether <code>Draw</code>, <code>DeletePart</code>, or <code>Normal</code>.</li> </ul> <p>Note: To update the pen color, you can call the <code>changeTool</code> function with an object that has the color property, whether it's specified as a hexadecimal value or a color name.</p> <pre><code>NagwaRenderingEngine.changeTool({ color: 'red' });\n</code></pre> <pre><code>NagwaRenderingEngine.changeTool({ color: '#a83232' });\n</code></pre> <p>Note: To update the pen size (stroke), you can call the <code>changeTool</code> function with an object that has the <code>strokeWidth</code> property.</p> <pre><code>NagwaRenderingEngine.changeTool({ strokeWidth: 3 });\n</code></pre> <p>Note: To update the pen type, you can call the <code>changeTool</code> function with an object that has the type property. The <code>type</code> property should be set to one of the three values:</p> <ul> <li><code>Draw</code>: For the draw pen type.</li> <li><code>DeletePart</code>: For the erase object pen type used to delete entire paths or objects.</li> <li><code>Normal</code>: For the normal pen mode, where you can have your default cursor and perform regular actions like clicking to solve a question.</li> </ul> <p>Here's an example snippet that demonstrates how to switch to erase object mode (delete mode) for deleting paths using the <code>changeTool</code> function</p> <pre><code>NagwaRenderingEngine.changeTool({ type: 'DeletePart' });\n</code></pre> <p>You have the option to send multiple properties at the same time as follows:</p> <pre><code>NagwaRenderingEngine.changeTool({\n    color: 'red',\n    strokeWidth: 3,\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#undo","title":"undo()","text":"<p>The undo() function allows you to perform an undo action for your last action and remove it. Within the application, we maintain an undo stack that keeps track of all user actions during the current session, enabling you to perform multiple undo actions as needed. By calling the undo() function, you can effortlessly revert the most recent action and continue undoing previous actions if necessary.</p> <pre><code>NagwaRenderingEngine.undo();\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#redo","title":"redo()","text":"<p>The redo() function enables you to redo your last undo action and retrieve it. With the help of our redo stack, which tracks all your undo actions during the current session, you can perform multiple redo actions as needed. Restoring changes that were previously undone becomes effortless,</p> <pre><code>NagwaRenderingEngine.redo();\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#handling-redo-and-undo-stack-empty-status","title":"Handling Redo and Undo Stack Empty Status","text":"<p>In addition to the <code>undo()</code> and <code>redo()</code> functions, The engine fires a message to notify you when the undo or redo stack becomes empty. These messages trigger the <code>historyStatusUpdated</code> event, allowing you to update your view accordingly. For more detailed information on how to handle these events, please refer to the events section.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#clearscreen","title":"clearScreen()","text":"<p>To clear the entire current screen view, simply call the <code>clearScreen()</code> function. Important to note that executing this action will remove all content, including drawings and images, from the current screen. Keep in mind that this action is irreversible, and you won't be able to undo it. However, the data will be saved inside Firebase, preserving the previous state of your work. Exercise caution when using this function to avoid accidental loss of data.</p> <pre><code>NagwaRenderingEngine.clearScreen();\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#agorastarted","title":"agoraStarted()","text":"<p>Call this function to send a message indicating that Agora has started to the engine. This action will trigger the <code>agoraStarted</code> message.</p> <pre><code>NagwaRenderingEngine.agoraStarted();\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#updatechatstatusstatus","title":"updateChatStatus(status)","text":"<p>Use this function if you want to update the chat status and enable or disable it, By calling this function with <code>false</code>, you can disable the chat feature, and with <code>true</code>, you can enable it again.</p> <pre><code>NagwaRenderingEngine.updateChatStatus(false); // will disable the chat\n</code></pre> <pre><code>NagwaRenderingEngine.updateChatStatus(true); // will enable the chat\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#updatecurrentquestionaskingstatus","title":"updateCurrentQuestionAskingStatus","text":"<p>Use This function if you want to update the current question status to be whether <code>Initial</code>, <code>In_Progress</code>, or <code>Time_Is_Up</code></p> <p>When <code>current_question_asking_status</code> is set to <code>In_Progress</code>, the student will be able to scroll and can submit the question answer once. However, when <code>current_question_asking_status</code> is set to <code>Time_Is_Up</code>, the student won't be able to scroll or submit the answer anymore, indicating that the time limit for the activity has expired. This function allows you to control the time-limited behavior of the application as required.</p> <pre><code>NagwaRenderingEngine.updateCurrentQuestionAskingStatus('Initial');\n</code></pre> <pre><code>NagwaRenderingEngine.updateCurrentQuestionAskingStatus('In_Progress');\n</code></pre> <pre><code>NagwaRenderingEngine.updateCurrentQuestionAskingStatus('Time_Is_Up');\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#engine-events","title":"Engine Events","text":"<p>The engine offers various events to listen to for custom actions and view updates. These events empower you to interact with the engine, respond to changes, update the view and enhance the user experience.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#engineloaded","title":"engineLoaded","text":"<p>This event will be fired when the engine is fully loaded and ready for use. It serves as an indication that all necessary components have been initialized, and you can now start interacting with the engine and its functionalities.</p> <pre><code>window.addEventListener('message', message =&gt; {\n    const data = JSON.parse(message.data);\n    if (data.messageKey === 'engineLoaded') {\n        // do your action here\n    }\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#currentscreenupdated","title":"currentScreenUpdated","text":"<p>This event will be fired whenever the current screen receives new data from Firebase and is updated accordingly. This event serves as a notification that the screen content has changed, allowing you to synchronize your view with the latest data received from the Firebase.</p> <pre><code>window.addEventListener('message', message =&gt; {\n    const data = JSON.parse(message.data);\n    if (data.messageKey === 'currentScreenUpdated') {\n        console.log(data.screenID);\n        // do your action here\n    }\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#interactionupdated","title":"interactionUpdated","text":"<p>This event will be fired when the current screen receives new interaction data from Firebase. Use this event to update your view and provide an interactive user experience.</p> <pre><code>window.addEventListener('message', message =&gt; {\n    const data = JSON.parse(message.data);\n    if (data.messageKey === 'interactionUpdated') {\n        console.log(\n            data.interactions.original,\n            data.interactions.formatedInteractions,\n            data.currentScreen,\n            data.questionID,\n            data.questionType, // aggregated_all_possible_answers, aggregated_only_student_answers, separated\n            data.choices, // if aggregated_all_possible_answers will contain all choices\n            data.correctAnswers\n        );\n        // do your action here\n    }\n});\n</code></pre> <p>Example of the output object if the question type is <code>aggregated_all_possible_answers</code> or <code>aggregated_only_student_answers</code>:</p> <pre><code>{\n    \"currentScreen\": \"4\",\n    \"questionID\": \"245178050680.2\",\n    \"questionType\": \"aggregated_all_possible_answers\",\n    \"choices\": [\"\u0623\", \"\u0628\", \"\u062c\", \"\u062f\"],\n    \"totalInteractions\": 1,\n    \"interactions\": [\n       {\n            \"count\": 1,\n            \"percentage\": 100,\n            \"answer\": \"\u0623\"\n        },\n        {\n            \"count\": 0,\n            \"percentage\": 0,\n            \"answer\": \"\u0628\"\n        },\n        {\n            \"count\": 0,\n            \"percentage\": 0,\n            \"answer\": \"\u062c\"\n        },\n        {\n            \"count\": 0,\n            \"percentage\": 0,\n            \"answer\": \"\u062f\"\n        }\n    ],\n    \"correctAnswers\": [], // always empty array (for now :D)\n    \"currentStudentAnswer: \"\u0623\", // or null if the student didn't answer\n    \"messageKey\": \"interactionUpdated\"\n}\n</code></pre> <p>Example of the output object if the question type is <code>separated</code>:</p> <pre><code>{\n    \"currentScreen\": \"9\",\n    \"questionID\": \"363128187320\",\n    \"questionType\": \"separated\",\n    \"choices\": [], // seperated questions don't have choices\n    \"totalInteractions\": 1,\n    \"interactions\": [\n        {\n            \"answer\": \"43242\",\n            \"studentID\": \"111111111111\",\n            \"studnetName\": \"the educator\"\n        }\n    ],\n    \"correctAnswers\": [], // always empty array (for now :D)\n    \"currentStudentAnswer: \"43242\", // or null if the student didn't answer\n    \"messageKey\": \"interactionUpdated\"\n}\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#drawingtoolsupdated","title":"drawingToolsUpdated","text":"<p>This event is fired when the current screen receives new drawing tools data from Firebase.</p> <pre><code>window.addEventListener('message', message =&gt; {\n    const data = JSON.parse(message.data);\n    if (data.messageKey === 'drawingToolsUpdated') {\n        console.log(data.mode, data.color, data.stroke);\n        // do your action here\n    }\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#questionaskingstatusupdated","title":"questionAskingStatusUpdated","text":"<p>This event will be fired when the <code>questionAskingStatus</code> status is updated.</p> <pre><code>window.addEventListener('message', message =&gt; {\n    const data = JSON.parse(message.data);\n    if (data.messageKey === 'questionAskingStatusUpdated') {\n        console.log(data.questionAskingStatus);\n        // values of questionAskingStatus is `Initial`, `In_Progress`, or `Time_Is_Up`\n        // do your action here\n    }\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#agorastarted_1","title":"agoraStarted","text":"<p>This event will be fired when the Agora starts.</p> <pre><code>window.addEventListener('message', message =&gt; {\n    const data = JSON.parse(message.data);\n    if (data.messageKey === 'agoraStarted') {\n        // do your action here\n    }\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#chatstatusupdated","title":"chatStatusUpdated","text":"<p>This event will be fired when the chat status is updated.</p> <pre><code>window.addEventListener('message', message =&gt; {\n    const data = JSON.parse(message.data);\n    if (data.messageKey === 'chatStatusUpdated') {\n        console.log(data.isChatEnabled);\n        // do your action here\n    }\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#historystatusupdated","title":"historyStatusUpdated","text":"<p>This event will be fired when the history status is updated.</p> <ul> <li><code>isUndoStackEmpty</code>: indicates whether the undo stack is empty or not.</li> <li><code>isRedoStackEmpty</code>: indicates whether the redo stack is empty or not.</li> <li><code>isScreenEmpty</code>: indicates whether the current screen is empty or not.</li> </ul> <pre><code>window.addEventListener('message', message =&gt; {\n    const data = JSON.parse(message.data);\n    if (data.messageKey === 'historyStatusUpdated') {\n        console.log(data.isUndoStackEmpty, data.isRedoStackEmpty, data.isScreenEmpty);\n        // do your action here\n    }\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/materialFetchingProcess/","title":"Fetching Material Process","text":""},{"location":"nagwa_sessions/pre_knowledge_required/materialFetchingProcess/#fetching-url-of-the-session-material","title":"Fetching URL of the Session Material","text":"<p>After Checking the unavailability of the material on the local device, we start the process of downloading it, First, we need to retrieve the material specified in the session; this is done by using the <code>getDownloadMaterialUrl</code> function, which is responsible for calling our session endpoint and retrieving the URL of associated material as a string, based on the <code>fileId</code> and <code>userId</code> of the session material.</p> API Endpoint sessions/downloadurl HTTP Method Get API Headers api-version: \"6\" API Query Parameters <ul> <li>fileID</li> <li>userID</li> </ul> API Response url"},{"location":"nagwa_sessions/pre_knowledge_required/materialFetchingProcess/#getting-the-url-of-session-material-function","title":"Getting The URL Of Session Material Function","text":"Fetch URl of Session Material Flowchart Function Name getDownloadMaterialUrl Required Parameters <ul> <li>DownloadSessionParams</li> <li>fileId</li> <li>userId</li> <li>sessionId</li> </ul> Function Return String that represents the URL <code>getDownloadMaterialUrl</code> Function Path <p>The <code>getDownloadMaterialUrl</code> function is located at the <code>lib/features/sessions/data/data_sources/sessions/sessions_remote_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/materialFetchingProcess/#download-session-material","title":"Download Session Material","text":"<p>After Getting the download URL of the material from the previous step, our next step will be to start downloading and saving the material locally.</p> <p>For that, you can find that the <code>downloadSessionMaterial</code> function is responsible for downloading the session material. This is done by:</p> <ol> <li> <p>Calling the <code>getDownloadMaterialUrl</code> function to get the download URL of the session material.</p> </li> <li> <p>Then the download URL is used to download the session material using the dio package.</p> <ul> <li>While downloading the session material, the onLoadingProgress function is called to update the download progress. and the function saves the downloaded session material in the temporary directory of the device</li> </ul> </li> <li>Finallt, The function returns the path of the downloaded session material.</li> </ol>"},{"location":"nagwa_sessions/pre_knowledge_required/materialFetchingProcess/#download-session-material-flowchart","title":"Download Session Material Flowchart","text":"Download Flowchart Function Name downloadSessionMaterial Required Parameters <ul> <li><code>DownloadSessionParams</code>: contains the <code>fileId</code> and <code>userId</code> of the session material.</li> <li><code>Function(double progress)</code>: a callback function that takes a double value as a parameter. It's used to update the progress of the download.</li> </ul> Function Return String that describes the material local path <code>downloadSessionMaterial</code> Function Path <p>The <code>getDownloadMaterialUrl</code> function is located at the <code>lib/features/sessions/data/data_sources/sessions/sessions_remote_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/md5_intro/","title":"Message Digest Algorithm 5 (MD5) Usage","text":"<p>You may have noticed that the engines api returns a string called <code>md5</code>, so what is that?</p> <p>The purpose of using MD5 is to facilitate the comparison between the retrieved engine/package and the one stored on the local device. When a download is initiated, the MD5 checksum of the downloaded package is calculated. This checksum is like a unique fingerprint that represents the content of the downloaded file.</p> <p>Next, the MD5 checksum of the locally stored package is also computed. By comparing these two MD5 checksums, we can determine if the contents of the downloaded package are identical to those stored on the local device. If the two MD5 checksums are different, it indicates that there is a mismatch between the files, and a download process is triggered to ensure the local copy is updated with the correct version.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/md5_intro/#summary","title":"Summary","text":"<p>In summary, MD5 is used as a reliable and efficient way to verify the integrity of files and to decide whether a new download is necessary when dealing with remote packages and local storage.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/packageMangerHelper/","title":"Package Manager Heplper","text":"<p>The <code>PackageManagerHelper</code> class contains the needed information to download and get packages. To simplify the management of engine-related packages in our app, we have developed a package manager helper. This class is responsible for handling tasks such as downloading and managing packages on the local device. In our implementation, we utilize Hive for local storage and Dio for network requests.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/packageMangerHelper/#getting-package","title":"Getting Package","text":"<p>The <code>getPackage</code> method is used to download and extract any required packages for starting the session. If the package is already stored locally and its stored MD5 hash matches the MD5 returned from the API, it will not be downloaded again. Instead, it will be obtained from the local path stored in Hive.</p> <p>Hive is used to store package-related data, such as the path, URL, Hive key, MD5 hash, and package ID if available.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/packageMangerHelper/#getting-package-flowchart","title":"Getting Package Flowchart","text":"Get Package Flowchart"},{"location":"nagwa_sessions/pre_knowledge_required/packageMangerHelper/#get-package-function","title":"Get Package Function","text":"Function Name getPackage Description This function is used to download a package. It takes the following parameters and returns a boolean value indicating whether the package was successfully downloaded or not. Parameters packageDetails (object): An object that contains the following properties:             <ul> <li>url: The URL of the package.</li> <li>md5: The MD5 checksum of the package.</li> <li>packageId: The identifier of the package.</li> <li>hiveKey: The hive key associated with the package.</li> <li>localPath: The local path where the package will be saved.</li> </ul> onLoadingProgress (callback): A callback function that is called every time a chunk of data is received during the download.          Return Value boolean: Returns true if the package is successfully downloaded, otherwise returns false.          <code>getPackage</code> Function Path <p>The <code>getPackage</code> function is located at the <code>lib/core/helpers/package_manager_helper.dar</code> path.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/packageMangerHelper/#downloading-a-package","title":"Downloading a Package","text":"<p>If a package is not stored locally, it is downloaded from the URL provided by the API. The 'downloadPackage' function is responsible for downloading the file from the given URL and saving it to a temporary directory. It also includes an optional progress callback The callback is called every time a chunk of data is received. This function returns a String that represents the path to the downloaded package file.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/packageMangerHelper/#download-package-flowchart","title":"Download Package Flowchart","text":"Download Package Flowchart"},{"location":"nagwa_sessions/pre_knowledge_required/packageMangerHelper/#download-package-function","title":"Download Package Function","text":"Function Name downloadPackage Required Parameters <ul> <li>downloadingUrl</li> <li>fileName</li> <li>onLoadingProgress: callback that is called every time a chunk of data is received.</li> </ul> Function Return String that represents the path of the downloaded file. <code>downloadPackage</code> Function Path <p>The <code>downloadPackage</code> function is located at the <code>lib/core/helpers/package_manager_helper.dar</code> path.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/sessionMaterial/","title":"Session Material Overview","text":"<p>Each session has it's own material , this material is a Zip file that contains the assets that the educator will use in the session, including slides, images, and questions, the zip folder includes 2 main components:</p> <ul> <li>XML File: This file contains the session data, which includes various slides. Each slide is identified by a number and categorized by its type. The types of slides can be either \"image\" slides or \"question\" slides. In the case of question slides, additional attributes are included, such as question_id, question_type, question_options, and key, which provide relevant information about the question.</li> <li>Slides Folder: Within this folder, there are sub-folders, and each sub-folder represents a single slide from the session. These slides can be either images or XML files that represent questions. </li> </ul> <p>You can check a sample content of the session material ZIP file from here Package Samples </p> <p>Each session has its own unique material folder. Therefore, each time we start a new session, we must ensure that we download the specific session material.</p>  Checking If Material Exist ? <p>The <code>checkIfMaterialExist</code> function checks the local device for the presence of a material using its file ID. This function determines whether the material is available locally and returns true or false accordingly.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/sessionMaterial/#linking-material-file-with-a-session","title":"Linking Material File with a Session","text":"<p>The session material is uploaded and selected from the portal when creating the session, as the name of the material folder is the same as session-id, </p> <p>Once the session starts the educator cannot modify the content of the material anymore.</p> Downloading Material Screen <p></p> Material  Folder Structure <p> </p>"},{"location":"nagwa_sessions/session/","title":"Session Feature","text":"<p> It\u2019s Highly recommended to have a look at the Pre-Knowledge Required Before Technical Dealing With Sessions section before diving deep into the session feature.</p>"},{"location":"nagwa_sessions/session/#business-overview","title":"Business Overview","text":""},{"location":"nagwa_sessions/session/#session-listing","title":"Session Listing","text":"<p>Educators have a central place where they can easily see all their ongoing and upcoming sessions. This list shows when each session will happen, how long it will be, and how many students enrolled in the session class.</p> <ul> <li> <p>Date and Duration: The educator can see exactly when each session will start and how long each session is supposed to last.</p> </li> <li> <p>Subject: The topic or subject of each session</p> </li> <li> <p>Number of Students: number of class students who are expected to attend the session</p> </li> <li> <p>Action Button: When it's time for a session to begin, there's a start button that the educator can press.</p> </li> </ul>"},{"location":"nagwa_sessions/session/#session-starting","title":"Session Starting","text":"<p>Once session time is reached, the session action card becomes active and clickable, and the educator can click start Then it will be available for students to join</p>"},{"location":"nagwa_sessions/session/#session-cancellation","title":"Session Cancellation \u274c","text":"<p>The educator can cancel the session anytime before it starts, Once cancelled it will be removed from the student\u2019s session list</p>"},{"location":"nagwa_sessions/session/#session-control-features","title":"Session Control Features","text":"<ul> <li>Mute/Un-Mute Mic: The educator can turn their microphone on and off as needed.</li> <li>End Session: The educator has the ability to end the session at any time, which will result in all students being kicked out .</li> <li>View Students List: Educators can see a list of current online students who are attending the session.</li> <li>Allowing Students to Speak: When a student raises their hand, the educator can permit them to speak. After they're done, the educator can take away the speaking permission, muting the student again.</li> <li>Kickout Student: Educators can (block) remove a student from the meeting, preventing them from rejoining the session.</li> <li>Enable/Disable Chat: Educators can decide whether to let students use text chat during the session.</li> </ul>"},{"location":"nagwa_sessions/session/#live-drawing-sharing","title":"Live Drawing Sharing","text":"<p>The educator can draw on the screen, and these drawings will be instantly visible to the students. This feature currently supports drawing with an Apple Pencil, here is all available drawing Options</p>"},{"location":"nagwa_sessions/session/#pen-selection","title":"Pen Selection","text":"<p>The educator can choose a pen and pick a color from various color choices. They can also adjust the thickness of the lines.</p>"},{"location":"nagwa_sessions/session/#erasing-options","title":"Erasing Options","text":"<p>The educator has multiple ways to erase:</p> <ul> <li> <p>Pen Eraser: This special pen, colored white, removes text or drawings by covering them with white.</p> </li> <li> <p>Object Eraser: It selectively erases certain objects or connected lines. Clicking on any part of an object will erase it.</p> </li> <li> <p>Reset Button: This resets the entire screen to its original state, removing all drawings and returning it to default.</p> </li> </ul>"},{"location":"nagwa_sessions/session/#live-questions-sharing","title":"Live Questions Sharing","text":"<p>Educators can share questions with students in real time. Students can submit their answers, which are then immediately visible to the educator. The educator can review the answers and share insights when the designated time is reached. Students have various ways to respond based on the question type.</p> <ul> <li> <p>When the educator selects a question slide, the question is displayed for students. However, students cannot respond at this point.</p> </li> <li> <p>Once the educator starts the question, students can submit their answers based on question type and click the submit button. At this point, Students can scroll through the question if needed. Each student can submit their answer only once.</p> </li> <li> <p>When the educator clicks the \"Time is Up\" button, students cannot submit further answers. They can now gain insights from the answers provided by their peers.</p> </li> <li> <p>Clicking the \"Done\" button by the educator removes the answer insights from the students' view.</p> </li> </ul>"},{"location":"nagwa_sessions/session/#adding-empty-slides","title":"Adding Empty Slides","text":"<p>Educators have the option to add empty slides if they want to demonstrate more ideas and need more drawing space</p>"},{"location":"nagwa_sessions/session/#communication-channals","title":"Communication Channals","text":""},{"location":"nagwa_sessions/session/#voice-communication","title":"Voice Communication","text":"<p>The educator can use voice communication to interact with students,he can grant/revok speaking student permission to speak when needed</p>"},{"location":"nagwa_sessions/session/#text-chat","title":"Text Chat","text":"<p>Students can send text messages in the chat, which can be read by the instructor. However, the instructor cannot reply and he only have the option to read the messages or even disable the text chat functionality for students.</p>"},{"location":"nagwa_sessions/session/#internet-connection-handling","title":"Internet Connection Handling","text":"<p>When internet connection issues occur from the educator's side, The system will instantly notify him regarding the issue, and we\u2019ll retry to connect him again while he is still on the session screen.</p>"},{"location":"nagwa_sessions/session/#supported-question-types","title":"Supported Question Types","text":"Question Type Description Free Response Question (FRQ) If the question requires a text-based response, students can type their answers as text and submit them. These answers will be shared with the educator. Multiple-Choice Questions (MCQ) If the question is in multiple-choice format, students can select the answer and submit it. After submitting, they can view the answers chosen by their peers. True/False Questions If the question to answer is in a true or false format, students can select the correct answer and submit it. After submitting, the answer will be shared with the educator. Input Box Questions (IBQ) In this type, we limit the student to provide a single type of answer. For example, if it's a math question and the answer should be an integer number, the student will not be allowed to submit a double number or character-based answer. Only numerical integer answers will be accepted. General Multiple Response Questions (GMRQ) These questions emulate a matching-style format where students are presented with two columns. They must match the items in the first column with their corresponding elements in the second column correctly."},{"location":"nagwa_sessions/session/calculatingDimensions/","title":"Calculating Dimensions for a Responsive Layout","text":"<p>To accommodate the variations in screen sizes and maintain a consistent aspect ratio across all student devices while in session, we employ an algorithm to calculate the required dimensions. The <code>calculateDimensions</code> function plays a vital role in this process. It takes two parameters:</p> <ul> <li> <p><code>BuildContext</code>: This provides the necessary screen size information.</p> </li> <li> <p><code>Orientation</code>: This helps adjust the dimensions based on portrait or landscape mode.</p> </li> </ul> <p>This method efficiently calculates and provides dimensions for various components, including margins, sidebar width, drawing area width, and content height. Its primary objective is to dynamically adjust these dimensions based on the screen size and orientation, ensuring a well-optimized layout and display on different devices and screen orientations.</p>"},{"location":"nagwa_sessions/session/calculatingDimensions/#algorithm-implementation","title":"Algorithm Implementation","text":"<ol> <li>The method first determines the screen size (<code>A</code> and <code>B</code>) based on the provided <code>BuildContext</code> and <code>Orientation</code>.</li> <li>It calculates <code>BOver18</code>, which is <code>B</code> divided by 18 and rounded down to the nearest integer.</li> <li> <p>If the calculated value of <code>A</code> is greater than or equal to <code>BOver18 * 32</code>, it proceeds with the following steps:</p> <ol> <li>Calculates <code>h3</code> as <code>BOver18 * 18</code>.</li> <li>Calculates <code>w1</code> as <code>(h3 / 9) * 12</code>.</li> <li>Calculates <code>w2</code> as <code>(h3 / 9) * 4</code>.</li> <li>Calculates the left margin (<code>lm</code>) as <code>(A - (w1 + w2))</code> divided by 2 and rounded up to the nearest integer.</li> <li>Calculates the right margin (<code>rm</code>) as <code>A - (w1 + w2 + lm)</code>.</li> <li>Sets the top and bottom margins (<code>tm</code> and <code>bm</code>) to 0.</li> </ol> </li> <li> <p>If the above condition is not met, it follows these steps:</p> <ol> <li>Calculates <code>w1</code> as <code>(A / 32)</code> multiplied by 24 and rounded down to the nearest integer.</li> <li>Calculates <code>w2</code> as <code>(A / 32)</code> multiplied by 8 and rounded down to the nearest integer.</li> <li>Calculates <code>h3</code> as <code>((w1 + w2) / 16) * 9</code>.</li> <li>Calculates the left margin (<code>lm</code>) as <code>(A - (w1 + w2))</code> divided by 2 and rounded up to the nearest integer.</li> <li>Calculates the right margin (<code>rm</code>) as <code>A - (w1 + w2 + lm)</code>.</li> <li>Calculates the top margin (<code>tm</code>) as <code>(B - h3)</code> divided by 2 and rounded down to the nearest integer.</li> <li>Calculates the bottom margin (<code>bm</code>) as <code>B - (h3 + tm)</code>.</li> </ol> </li> <li> <p>Return a new <code>Dimensions</code> object with the calculated margins, sidebar width (<code>w2</code>), drawing area width (<code>w1</code>), and content height (<code>h3</code>).</p> </li> </ol>"},{"location":"nagwa_sessions/session/calculatingDimensions/#parameters-describtion","title":"Parameters Describtion","text":"Parameter Description context is the context of the screen orientation is the orientation of the screen Dimensions is a class that contains the dimensions of the screen margins is a map that contains the margins of the screen sideBarWidth is the width of the sidebar drawingAreaWidth is the width of the drawing area contentHeight is the height of the content A is the width of the screen B is the height of the screen BOver18 is the height of the screen divided by 18 h3 is the height of the content w1 is the width of the drawing area w2 is the width of the sidebar lm is the left margin rm is the right margin tm is the top margin bm is the bottom margin"},{"location":"nagwa_sessions/session/calculatingDimensions/#code-implementation","title":"Code Implementation","text":"Dimensions Calculations Code <pre><code>import 'dart:math';\n\nimport 'package:flutter/cupertino.dart';\n\nclass Dimensions {\nfinal Map&lt;String, int&gt; margins;\n\nfinal int sideBarWidth;\n\nfinal int drawingAreaWidth;\n\nfinal int contentHeight;\n\nfinal int toolbarHeight;\n\nfinal int slidesBarHeight;\n\nDimensions({\n    required this.margins,\n    required this.sideBarWidth,\n    required this.drawingAreaWidth,\n    required this.contentHeight,\n    required this.toolbarHeight,\n    required this.slidesBarHeight,\n});\n}\n\nDimensions calculateDimensions(BuildContext context, Orientation orientation) {\nlate double A;\nlate double B;\nif (orientation == Orientation.portrait) {\n    B = MediaQuery.of(context).size.height;\n    // width\n    A = MediaQuery.of(context).size.width;\n} else {\n    B = MediaQuery.of(context).size.height;\n    A = MediaQuery.of(context).size.width;\n}\n\nconst toolbarHeight = 100;\n\nfinal BOver18 = ((B - 200) / 18).floor();\n\nif (A &gt;= BOver18 * 32) {\n    print('A is greater');\n\n    final contentHeight = BOver18 * 18;\n\n    final slidesBarHeight = B - toolbarHeight - contentHeight;\n\n    final drawingAreaWidth = (contentHeight / 9) * 12;\n\n    final sideBarWidth = (contentHeight / 9) * 4;\n\n    final lm = (A - (drawingAreaWidth + sideBarWidth)) ~/ 2;\n\n    final rm = A - (drawingAreaWidth + sideBarWidth + lm);\n\n    const tm = 0;\n\n    const bm = 0;\n\n    return Dimensions(\n    margins: {\n        'tm': tm,\n        'lm': lm,\n        'rm': rm.toInt(),\n        'bm': bm,\n    },\n    sideBarWidth: sideBarWidth.toInt(),\n    drawingAreaWidth: drawingAreaWidth.toInt(),\n    contentHeight: contentHeight,\n    toolbarHeight: toolbarHeight,\n    slidesBarHeight: slidesBarHeight.toInt(),\n    );\n}\n\nfinal drawingAreaWidth2 = (A / 32).floor() * 24;\n\nfinal sideBarWidth2 = (A / 32).floor() * 8;\n\nfinal contentHeight2 = ((drawingAreaWidth2 + sideBarWidth2) / 16) * 9;\n\n// screen height is the minimum of a, b\n\nfinal slidesBarHeight2 = A * 3 / 4 - (toolbarHeight + contentHeight2);\n\nfinal lm = (A - (drawingAreaWidth2 + sideBarWidth2)) ~/ 2;\n\nfinal rm = A - (drawingAreaWidth2 + sideBarWidth2 + lm);\n\nfinal tm = (B - (contentHeight2 + slidesBarHeight2 + toolbarHeight)) ~/ 2;\n\nfinal bm = B - (contentHeight2 + tm + slidesBarHeight2 + toolbarHeight);\n\nreturn Dimensions(\n    margins: {\n    'tm': tm,\n    'lm': lm,\n    'rm': rm.toInt(),\n    'bm': bm.toInt(),\n    },\n    sideBarWidth: sideBarWidth2,\n    drawingAreaWidth: drawingAreaWidth2,\n    contentHeight: contentHeight2.toInt(),\n    toolbarHeight: toolbarHeight,\n    slidesBarHeight: slidesBarHeight2.toInt(),\n);\n}\n</code></pre>"},{"location":"nagwa_sessions/session/session_technical/","title":"Session Feature Technical Components","text":"<p>s</p>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/","title":"Agora RTC Handling","text":"<p>When we receive the <code>engineLoaded</code> event we start the process of initializing Agora RTC</p> What is the engineLoaded Event <p>This event will be fired from the HTML rendering engine when the engine is fully loaded and ready for use. It serves as an indication that all necessary components have been initialized, and you can now start interacting with the engine and its functionalities.</p>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/#setup-agora-voice-sdk","title":"Setup Agora Voice SDK","text":"<p>Our first step will be setting up the the voice SDK engine and registering the event handler for the voice SDK engine events , for that we use the <code>setupVoiceSDKEngine</code> method the handle the setup process.</p> Setup Voice SDK Flowchart <p></p> <code>setupVoiceSDKEngine</code> Function Path <p>The <code>setupVoiceSDKEngine</code> function is located at the <code>lib/features/sessions/presentation/logic/voice_calling/voice_call_cubit.dart</code> path.</p>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/#join-agora-engine","title":"Join Agora Engine","text":"<p>You can notice that inside the <code>setupVoiceSDKEngine</code> function, we call the a function called <code>joinAgoraEngine</code> in case if the user is eductor, inside this function we call the agoraStarted function inside the HTML rendering engine. <code>NagwaRenderingEngine.agoraStarted();</code></p> <p>What is <code>agoraStarted</code> function ?</p> <p>We call this function to send a message indicating to the HTML rendering engine that Agora has started. This action will trigger the agoraStarted message.</p>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/#switch-between-members-types","title":"Switch Between Members Types","text":"<p>The switch between the broadcaster and audience roles can be done by calling the <code>setClientRole</code> method of the Agora engine and passing the desired role as a parameter.and it Sets the user role and level in an interactive live streaming channel</p> <p>Agora engine is initialized with the channel profile set to <code>channelProfileLiveBroadcasting</code>, which is the profile when there are more than two users in the channel</p>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/#mute-unmute-functionlity","title":"Mute &amp; UnMute Functionlity","text":"<p>The mute and unmute microphone functionality can be done by calling the <code>muteLocalAudioStream</code> method of the Agora engine and passing the desired state as a parameter. the method stops or resumes publishing the local audio stream.</p> Mic Status Screenshot <p></p>  Access Microphone Permission <p>The process of setting up the Agora Voice SDK cannot begin without obtaining permission from the educator to access the microphone. A popup will appear requesting permission before proceeding.</p> <p></p>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/#join-rtc-channel","title":"Join RTC Channel","text":"<p>After setting up the voice SDK, our next step is to join the RTC channal and setting the default audio route.</p> <ol> <li>It set the default audio route to speakerphone by calling <code>agoraEngine.setDefaultAudioRouteToSpeakerphone(true)</code></li> </ol> <p>If you want the default audio route to be the earpiece , change true to be false</p> <ol> <li>Gets the client role type  whether the user is a broadcaster or an audience member, and then sets the client role accordingly.</li> </ol>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/#participant-types-in-agora-rtc","title":"Participant Types In Agora RTC","text":"<ul> <li><code>clientRoleAudience</code> : the default role for the user when he joins the channel, it means that the user can only listen to the voice of the broadcaster and cannot speak.</li> <li> <p><code>clientRoleBroadcaster</code> role means that the user can speak and listen to the voice of the broadcaster.</p> </li> <li> <p>Call to join the channel is made with</p> </li> <li><code>token</code>: The token generated on our server for authentication.    2.<code>channelId</code>: The channel name. This parameter signifies the channel in which users engage in real-time audio and video interaction</li> <li><code>options</code>: The channel media options which containe many parameters , one of them is the client role type</li> <li><code>UID</code>:The user ID. This parameter is used to identify the user in the channel for real-time audio and video interaction</li> <li>Enable the local audio and the local audio stream is muted or unmuted depending on the microphone status of the user. </li> </ul> Join RTC Flowchart <p></p> <code>join</code> Function Path <p>The <code>join</code> function is located at the <code>lib/features/sessions/presentation/logic/voice_calling/voice_call_cubit.dart</code> path.</p>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/#leaving-the-channel","title":"Leaving the Channel","text":"<ul> <li> <p>The <code>leave</code> method serves the purpose of enabling an educator to exit the channel and free up the resources used by the Agora engine. When an educator decides to leave the channel, this process is initiated by invoking the <code>leaveChannel</code> method of the Agora engine, which ensures the user's disconnection from the session. </p> </li> <li> <p>Additionally, the <code>release</code> method of the Agora engine is called to properly release all resources associated with the engine. After a successful method call, we can no longer use any method or callback in the SDK anymore. If we want to use the real-time communication functions again, you must call createAgoraRtcEngine and initialize to create a new RtcEngine instance</p> </li> </ul> <p>When we call <code>release</code> immediately after calling <code>leave</code>, the SDK does not trigger the onLeaveChannel callback.</p>"},{"location":"nagwa_sessions/session/session_technical/agoraRTCHandling/#switch-microphone-state","title":"Switch Microphone State","text":"<p>The <code>switchMicrophone</code> function is used to switch the microphone status from muted to unmuted and vice versa.</p> <ul> <li>It first checks if the user is joined to the channel or not </li> <li>If joined, it will set the isMicrophoneMuted variable to the new status, </li> <li>then set the client role to the new status </li> <li>Change the audio stream whether muted or not based on <code>isMuted</code> varible by calling the <code>muteLocalAudioStream</code> from the agora engine.</li> </ul> <p>The  <code>muteLocalAudioStream</code> stops or resumes publishing the local audio stream ,  as it takes a <code>mute</code> varible to spacify Whether to stop publishing the local audio stream: true : Stops publishing the local audio stream. false : (Default) Resumes publishing the local audio stream.</p>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/","title":"Agora Singling Handling (RTM)","text":"<p>Before starting the initialization process, we need to first set the credentials required, For this, we use the \u201csetSessionCredential\u201d function, which is responsible for setting the session credential , the user , the session and the channel name for the chat and the actions channel</p> <pre><code>channelChatName = \"ChatChannel:${currentSessionCredential.sessionId}\";\nchannelActionsName = \"ActionsChannel:${currentSessionCredential.sessionId}\";\n</code></pre>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#initializing-signaling","title":"Initializing Signaling","text":"<p>The <code>initRTM</code> method is responsible for initializing the Agora RTM client and logging in to it by first</p> <ul> <li>Creating an instance of the Agora RTM client using the provided App ID.</li> <li>Logs in the client using the RTM token and user ID from the current session credentials.</li> <li>Create <code>onMessageReceived</code> callback that will be called when a message is received from the RTM client .</li> <li>Create an <code>onConnectionStateChanged2</code> callback that will be called when the connection state <code>RtmConnectionState</code> Event changes.</li> <li>Finally, a call to the <code>_createRtmChannel</code>  method to create the chat channel and the actions channel</li> </ul> Initializing Agora Singling (RTM) Flowchart <p></p>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#rtm-connection-state-events","title":"RTM Connection State Events","text":"State Description Aborted This means that the device is used in another session and will emit SignalingChanged(SignalingActionsdeviceUsed).         Our response to this situation is to inform the educator that their session is open on another device. Then, we will remove them from the first session and let them stay only in the last session they opened on their current device. Disconnected or Reconnecting This means that the connection is lost and will emit SignalingConnectionFailure(). It will show a toast with the message that the connection is lost, and the user can't send messages or actions. Connected This means that the connection is restored and will emit SignalingConnectionRestored(). It will show a toast with the message that the connection is restored, and the user can send messages or actions. <code>initRTM</code> Function Path <p>The <code>initRTM</code> function is located at the <code>lib/features/sessions/presentation/logic/signaling/signaling_cubit.dart</code> path.</p>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#aborted-state-handling","title":"Aborted State Handling","text":"The user Has Another open Account (RtmConnectionState.aborted)"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#handling-recived-messages-onchat-function","title":"Handling Recived Messages: <code>onChat</code> Function","text":"<p>After creating the RTM chat channal,now we need to listen for new members joining the channel and handles any recived text messages; For that we use the <code>onChat</code> Funciton which listens for <code>onMessageReceived</code> event which occurs when receiving a channel message.</p> <p>Every time a message is recived we handle it by calling <code>handleReceivedMessage</code></p> <ol> <li>It creates an instance of the MessageModel [<code>fullName</code>, <code>message</code>, <code>isFirstMessage</code> ] from the message object.</li> <li>Checks if the message is the first message in the chat or not by checking if the message list is empty or the full name of the message is not equal to the first message's full name.</li> <li>Then it inserts the message into the first index of the messages list and emits <code>MessageReceived()</code> event to notify the UI that a new message has been received.</li> </ol> handleReceivedMessage Function <pre><code>void handleReceivedMessage(Map&lt;String, dynamic&gt; messageObj) {\nfinal messageModel = MessageModel.fromJson(messageObj);\nfinal bool isFirst =\n    messages.isEmpty || messageModel.fullName != messages.first.fullName;\nmessageModel.isFirstMessage = isFirst;\nmessages.insert(0, messageModel);\nisAllMessagesRead = false;\nemit(MessageReceived());\n}\n</code></pre>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#handling-recived-actions-onactions-function","title":"Handling Recived Actions: <code>onActions</code> Function","text":"<p>After creating the RTM action channal, now we need to join the channel and listen to the incoming messages on it , For that we use the <code>onAction</code> function which joins a channel and listens for incoming messages [<code>onMessageReceived</code> event], then calls a function to handle the received actions.</p> <p> Actions list (Numbers &amp; Describtion)</p> <p>Every time a message is recived we handle it by calling <code>handleReceivedActions</code> function.</p> <ol> <li>This function takes a map of strings and dynamic as an argument, then creates an <code>ActionModel</code> object that containes [<code>signalingAction</code>, <code>userId</code>, <code>username</code>] from the map. then it checks the type of action and performs certain actions based on the result</li> <li>If the action is a reset action, the function <code>reset()</code> is called to reset the signaling.</li> <li>If it's raiseHand, it will emit <code>signalinguserRaiseHandStatusChanged</code> with the <code>studentId</code> and <code>isHandRaised</code> = true</li> <li>Otherwise, it will emit <code>SignalingChanged(actionModel.signalingAction)</code></li> </ol> handleRecivedActions Function <pre><code>void handleReceivedActions(Map&lt;String, dynamic&gt; actionObj) {\nfinal actionModel = ActionModel.fromJson(actionObj);\nif (actionModel.signalingAction == SignalingActions.reset) {\n  emit(SignalingReset(studentId: int.parse(actionModel.userId)));\n} else if (actionModel.signalingAction == SignalingActions.raiseHand) {\n  emit(\n    SignalingUserRaiseHandStatusChanged(\n      studentId: int.parse(actionModel.userId),\n      isHandRaised: true,\n    ),\n  );\n}\nif (actionModel.signalingAction != SignalingActions.reset) {\n  emit(SignalingChanged(actionModel.signalingAction));\n}\n} \n</code></pre> <p>In additon to the previous uses of the function , <code>onActions</code> also listen for any changes in members state (<code>onMemberJoined</code> event), and emit <code>SignalingUserOnlineStatusChanged</code> with the online status and student ID.</p>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#sending-action-sendaction-function","title":"Sending Action: <code>sendAction</code> function","text":"<p>To facilitate the sending of actions we use the <code>sendAction</code> function to send an action to the RTM channel 1. Creates an action object, which contains the following:    1. Text that represents the action type.    2. user ID    3. message type    4. timestamp    5. offline status 2. Call the <code>sendMessage2()</code> function on the RTM channel object with the action object as an argument the message object is as follows     <pre><code>messageObj = {\n  \"text\": jsonEncode({\n    \"a\": signalingAction.type,\n    \"si\": studentId?.toString() ?? user.userID.toString(),\n  }),\n  \"messageType\": 1,\n  \"ts\": 0,\n  \"offline\": false,\n};\n</code></pre></p>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#disabling-chat-functionality","title":"Disabling Chat Functionality","text":"<p>As you know that the eductor has the authority to disable chat functionality , to handles this we call the <code>updateChatStatus</code> function which runs <code>NagwaRenderingEngine.updateChatStatus($isEnabled)</code>  function in the webview which enables or disables the chat and emits the <code>DrawingRefresh</code></p> <p>Use the <code>updateChatStatus</code> function if you want to update the chat status and enable or disable it. By calling this function false, you can disable the chat feature, and with true, you can enable it again.</p> <p>In case the educator has internet connection issues, the chat functionality will be disabled.</p> Enable &amp; Disable Button Screenshot <p></p>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#chat-status-handler","title":"Chat Status Handler","text":"<p>The HTML rendering engine sends an <code>chatStatusUpdated</code> event when the chat status is updated (enabled / disabled). So we use the <code>chatstatusHandler</code> function which is a javascript callback which checks if the chat is enabled or not and change the isChatEnabled value, the </p>"},{"location":"nagwa_sessions/session/session_technical/agoraSignalingHandling/#closing-rtm-channel","title":"Closing RTM Channel","text":"<p>Upon finishing the session or exiting from it, a function is called to logout the eductor from all channels joined. The <code>close()</code> function is responsible for releasing resources and logging out the user from the chat and action channels - First, it leaves the chat channel, then releases it - then it leaves the action channel, then releases it - then it logout from the RTM client, then releases  </p>"},{"location":"nagwa_sessions/session/session_technical/cancelSession/","title":"Canceling Session","text":"<p>Canceling Session Is Not Currently Enabled</p> <p>Currently , the cancel session feature is not included in the application</p> <p>The educator can cancel the session anytime before it starts and it will be removed from the student session list </p> Cancel Session Button <p></p>"},{"location":"nagwa_sessions/session/session_technical/cancelSession/#cancel-session-api","title":"Cancel Session API","text":"Canceling Session API API Endpoint sessions/cancel HTTP Method POST API Required Data <ul> <li>educatorId</li> <li>sessionId</li> </ul> API Headers api-version: 6 <code>cancelSession</code> Function Path <p>The <code>cancelSession</code> function is located at the <code>lib/features/sessions/data/data_sources/sessions/sessions_remote_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/","title":"Handling Drawing","text":"<p>The educator has the option to draw on the screen, and all drawings will be shared with the students in real-time.</p> <p>Currently, the ability to draw is limited to the use of an Apple Pencil.and no other method is available.</p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#initialize-drawing","title":"Initialize Drawing","text":"<p>The <code>init</code> function is located inside \u2018DrawingCubit\u2019, it\u2019s called when the user joins a session, Its required parameters are session id, file id, user id, and the user name, The <code>init</code> function in the WebView initializes the rendering engine to establish a connection with the session Firestore and retrieve all the necessary data. Initialize Drawing<pre><code>window.NagwaRenderingEngine.init({\n    name: 'Mohamed Ahmed Mahmoud',\n    role: 'educator', \n    rootElementID: 'root', // if not passed it will be `root`\n    userID: '$currentUserId',\n    sessionID: '$currentSessionId',\n    packageBasePath: '', // the base path of the package to download the package\n    enginesBasePath: '', // the base path of the engines\n    firebaseConfig: {\n        apiKey: 'API KEY',\n        authDomain: 'AUTH DOMAIN',\n        projectId: 'PROJECT ID',\n        storageBucket: 'STORAGE BUCKET',\n        messagingSenderId: 'MESSAGING SENDER ID',\n        appId: 'APP ID',\n    },\n});\n</code></pre></p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#drawing-types","title":"Drawing Types","text":"Pen Mode Description draw For the draw pen type. deletePart For the erase object pen type used to delete entire paths or objects. normal For the normal pen mode, you can have your default cursor and perform regular actions like clicking to solve a question."},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#change-pen-color","title":"Change Pen Color","text":"<p>Educators can draw using various types and colors of pens. Here\u2019s a list of the available pens: </p> <ul> <li>black(\"#4d4d4f\")</li> <li>blue(\"#56a5e1\")</li> <li>red(\"#e24c3c\")</li> <li>green(\"#119f25\")</li> <li>orange(\"#f4a304\")</li> <li>purple(\"#ff2aff\")</li> </ul> <p>To facilitate the erasing of points, we have a pen eraser with the color white eraser(\"#ffffff\").</p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#pen-stroke","title":"Pen Stroke","text":"<p>The \"Stroke\" refers to how thick the drawing pen's lines are. It's a number between 1 and 5, where 1 is thin and 5 is thick. When an educator picks a stroke size, it turns green to show that it's selected.</p> Drawing Pen Stroke <p></p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#changing-between-pens-colors-stroke","title":"Changing Between Pens Colors / Stroke","text":"<p>We are using the \u2018changeTool\u2019 function,  to send an update to the engine to change smoothly between pens, inside the function we run this js command <code>\"NagwaRenderingEngine.changeTool({ type: '${drawingType}' ${color} ${stroke} });\"</code></p> <p><code>changeTool</code> function is located at the lib/features/sessions/presentation/logic/drawing/drawing_cubit.dart path.</p> Available Drawing Pen Types <p></p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#erasing-objects-object-eraser","title":"Erasing Objects (Object Eraser)","text":"<p>To help educators delete specific objects or paths on the screen, they can use the \"Object Eraser\" tool.</p> <p>To use the object eraser: 1. The Educator can select the erasing pen at the top of the screen. 2. Tap the switch button to turn on the object eraser.</p> <p>When it's on, the drawing type will change to \u2018deletePart\u2019 type, which is the mode for deleting objects</p> Object Eraser Screenshot <p></p> <p>What distinguishes the eraser pen, object eraser, and reset button?</p> <p>All three options serve the purpose of deleting drawings on the screen, but they operate differently:</p> <ul> <li>Pen Eraser: This tool functions as a white pen, which essentially covers the content on the screen with white color, making it invisible.</li> <li>Object Eraser: The object eraser deletes entire objects or connected paths when you click on any point of the object.</li> <li>Reset Button: Clicking this button resets the entire screen, removing all drawings and restoring it to its default state.</li> </ul>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#drawing-tools-message-handler","title":"Drawing Tools Message Handler","text":"<p>The <code>drawingToolsUpdated</code> event is fired  from the HTML engine when the current screen receives new drawing tools data from Firebase. for that we are using the <code>drawingToolsMessageHandler</code> function which will be fired when we receive a drawingToolsUpdated event from the WebView, The message will contain the current drawing mode , the current pen color, and the current stroke, It checks the drawing mode to see whether it's <code>normal</code> , <code>draw</code> or <code>deletePart</code></p> <ol> <li>It takes the arguments recived with event, decodes them as strings, and converts it to a map of strings and dynamic</li> <li>Then it gets the penColorHex, mode, and stroke values from the map and checks if it are equal to the selectedPen, currentDrawingType, and currentStroke values or not</li> <li>If it is not equal, it changes the selectedPen, currentDrawingType, and currentStroke values to the gotten values and emits the drawingrefresh</li> </ol> <p>The <code>drawingToolsMessageHandler</code> is located at the lib/features/sessions/presentation/logic/drawing/drawing_cubit.dart path.</p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#undo-redo-drawing","title":"Undo &amp; Redo Drawing","text":"<p>The educator has the option to undo or redo a drawing action; these two buttons become active when the drawing stack got filled </p> <p>We handles this by calling the undo or redo functions in the html rendering engine <code>NagwaRenderingEngine.undo();</code></p> Function Description Undo The undo function allows you to perform an undo action for your last action and remove it. Within the application, we maintain an undo stack that keeps track of all user actions during the current session, enabling you to perform multiple undo actions as needed. By calling the undo() function, you can effortlessly revert the most recent action and continue undoing previous actions if necessary. Redo The redo function enables you to redo your last undo action and retrieve it. With the help of our redo stack, which tracks all your undo actions during the current session, you can perform multiple redo actions as needed. Restoring changes that were previously undone becomes effortless. Undo &amp; Redo Screen <p></p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#handling-the-empty-status-of-redo-and-undo-stack","title":"Handling the Empty Status of Redo and Undo Stack","text":"<p>In addition to the <code>undo()</code> and <code>redo()</code> functions, The engine fires a message to notify you when the undo or redo stack becomes empty. These messages trigger the <code>historyStatusUpdated</code> event, allowing you to update your view accordingly.</p> <p>In our case, we make the two buttons inactive when this situation occurs, so educators cannot click on them anymore.</p> Inactive Undo &amp; Redo Buttons <p></p>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#history-status-updated-msg-handler","title":"History Status Updated Msg Handler","text":"<p>The <code>historyStatusUpdatedMsgHandler</code> function takes the args as a parameter, its main purpose is to check if the undo and redo stacks are empty or not and changes the isUndoStackEmpty and isRedoStackEmpty values</p> <ol> <li> <p>First, it decodes the arguments as strings and converts it to a map of strings and dynamic </p> </li> <li> <p>Then it gets the isUndoStackEmpty and isRedoStackEmpty values from the map and checks if they are equal to the isUndoStackEmpty and isRedoStackEmpty values or not.</p> </li> <li> <p>If it is not equal, it changes the isUndoStackEmpty and isRedoStackEmpty values to the obtained values and emits the DrawingUndoRedoChanged.</p> </li> </ol>"},{"location":"nagwa_sessions/session/session_technical/drawingHanding/#reset-entire-screen","title":"Reset Entire Screen","text":"<p>To clear the entire current screen view, simply call the clearScreen() function. Where we can run the js command <code>NagwaRenderingEngine.clearScreen();</code></p> <p>Executing reset action will remove all content, including drawings and images, from the current screen. Keep in mind that this action is reversible. You can use the undo button to return to the previous state, the data will be saved inside Firebase, preserving the previous state of your work.</p>"},{"location":"nagwa_sessions/session/session_technical/endSession/","title":"Ending Session","text":"<p>Once the educator finishes his session, he can press the end session button, which will end the session and inform all students that the session has ended.</p> End Session Button Screen <p></p>"},{"location":"nagwa_sessions/session/session_technical/endSession/#end-session-api","title":"End Session API","text":"Ending Session API API Endpoint sessions/end HTTP Method POST API Required Data <ul> <li>sessionId</li> <li>educatorId</li> </ul> API Headers api-version: 6"},{"location":"nagwa_sessions/session/session_technical/endSession/#updating-session-status","title":"Updating Session Status","text":"<p>We need to update the data in Firestore; <code>updateSessionStatus</code> is responsible for that: - it accesses a collection in the Firestore called <code>sessions_in_progress</code>. - if the sessionStatus is ended, it will create a document name equal to the educatorId and set the data of the document to empty map.</p> <ul> <li>if the <code>sessionStatus</code> is ended, it will create a document name equal to the <code>educatorId</code> and set the data of the document to empty map.</li> </ul> <p>Why we need to update the session status in firebase?</p> <p>We rely on firebase to listen to any changes in session wheter it's started / ended so that we can update the class sessions list in real-time without any delays.</p> <code>endSession</code> Function Path <p>The <code>endSession</code> function is located at the <code>lib/features/sessions/data/data_sources/sessions/sessions_remote_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/session/session_technical/joinSession/","title":"Session Joining","text":"<p>If anything happens that causes the educator to exit the session, even if they accidentally close the app, they can see the list of session cards when they open the app again. The card will have a Continue button. Once they click the button, we will call the <code>sessions/join</code> API to retrieve the required data needed to rejoin the running session.</p> <p>The join session button is only available if the session is already started and still running.</p> <p>The session will not be completely ended and students will still be able to join unless: The educator presses the end session button OR The session reached its end date.</p>"},{"location":"nagwa_sessions/session/session_technical/joinSession/#join-session-api","title":"Join Session API","text":"Joining Session API API Endpoint sessions/join API Query Parameters clientType HTTP Method POST API Required Data <ul> <li>userId</li> <li>sessionId</li> </ul> API Headers api-version: 7 API Response <ul> <li>actualStartDate</li> <li>rtcToken</li> <li>rtmToken</li> <li>sessionId</li> </ul>"},{"location":"nagwa_sessions/session/session_technical/joinSession/#return-parameters-from-the-api","title":"Return Parameters From the API","text":"Return Parameter Data Type Description rtcToken String Web RTC token, only populated if the WebRTC session provider is \u2018Agora\u2019 actualStartDate Long Time when the educator started the session in Unix time rtmToken String Web RTM token, for supporting chat during sessions sessionId Number ID of the session"},{"location":"nagwa_sessions/session/session_technical/joinSession/#join-session-flowchart","title":"Join Session Flowchart","text":"Joining Session Flowchart Function Name joinSession Function Required Parameters <ul> <li>userId: Number (ID of the user who wants to join the session)</li> <li>sessionId: Number (ID of the session)</li> </ul> Function Return Parameters <ul> <li>startedSessionDuration</li> <li>rtcToken</li> <li>rtmToken</li> <li>sessionId</li> </ul> <code>joinSession</code> Function Path <p>The <code>joinSession</code> function is located at the <code>lib/features/sessions/data/data_sources/sessions/sessions_remote_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/","title":"Handling Questions Sharing &amp; Answering","text":"<p>One of the main features of the HTML rendering engine is the ability to render questions and support answering them. Once the educator starts a question, the student can answer it in real time, and the answer will be shared with the educator.</p>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#questions-asking-status","title":"Questions Asking Status","text":""},{"location":"nagwa_sessions/session/session_technical/questionHandling/#inital-status","title":"Inital Status","text":"<p>The question is considered Initial when an educator selects a question slide but has not yet started it,  In this case, the question will be shared with students, but they will not be able to answer it. The educator can change the question-asking status at any time by clicking on the question icon.</p> Question Initial Status - Student View  <p></p> Question Initial Status - Educator View  <p></p>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#in-progress-status","title":"In-Progress Status","text":"<p>This is the status that happens when an educator starts a question and students can respond. Students choose their answer and press \"send.\" Once submitted, the educator views student responses. Students can't change their answers. Eventually, the right answer is revealed.</p> <ul> <li>Wrong Answer: If a student's response is wrong, their choice turns red. The correct answer becomes green.</li> <li>Correct Answer: If a student's response is correct, their choice turns green.</li> </ul> <p>In <code>in_progress</code> status, the students can scroll the question as they need, the scroll is done on their local device and doesn\u2019t affect the remaining participant's</p> Question In_Progress Status - Educator View  <p></p> Answered Question - Student View  <p></p>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#time_is_up-status","title":"Time_Is_Up Status","text":"<p>This is the status of a question when the educator has stopped students from answering. This will end the question for all students. All students will be able to see the questions insights, which vary based on the question type:</p> <ul> <li> <p>In the case of MCQ Questions, it will show each answer choice and the total number of students who selected that choice.</p> </li> <li> <p>In the case of questions that require text answer, it will show every student's answer in a single box</p> </li> </ul> Change status to Time_Is_Up  - Educator View  <p></p> <p>When the educator press the \u2018time_is_up\u2019 button, we will share all answers with all students in the session, To stop the insights sharing, the educator needs to press the done button, which will restore the question asking status to initial</p>  Stop Sharing Answers and Insights With Students <p></p>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#updating-the-question-asking-status","title":"Updating the Question Asking Status","text":"<p>To send an update to the students that the question status [Initial, In_Progress, Time_Is_Up] has been changed, the <code>updateQuestionAskingStatus</code> method is called when the educator clicks on the question button in the WebView. This function allows you to control the time-limited behavior of the application as required. as it calls the update question function from the html rendering engine <code>NagwaRenderingEngine.updateCurrentQuestionAskingStatus($questionAskingStatus);</code></p> <p>For more information , kindly navigate to <code>updateCurrentQuestionAskingStatus</code> section</p> <p>Keep In Mind</p> <ul> <li>When \u201cCurrentQuestionAskingStatus\u201d is set to \u201cIn_Progress\u201d, the student will be able to scroll and submit the question answer once. </li> <li>When current_question_asking_status is set to \u201cTime_Is_Up\u201d, the student won't be able to scroll or submit the answer anymore, indicating that the time limit for the activity has expired.</li> </ul>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#receiving-questions-status-update","title":"Receiving Questions Status Update","text":"<p>The HTML rendering engine will fire a <code>questionAskingStatusUpdated</code> event when the <code>questionAskingStatus</code> is updated, for that we use a  questionAskingStatusUpdated function which handle it and emits QuestionAskingStatusChanged state.</p>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#handling-answers-insights","title":"Handling Answer's Insights","text":"<p>When the educator changes the question-answering status to be <code>Time_Is_Up</code>, a question insight will be shared with all students, in this case, an <code>interactionUpdated</code> event will be fired, For that, we are using the <code>getInsights</code> which is a callback function that is called when the insights are updated in the WebView.</p> <p>Answer insights will be shared with all session students, including those who didn\u2019t answer the question.</p> Output object if the question type is <code>aggregated_all_possible_answers</code> or <code>aggregated_only_student_answers</code> <pre><code>{\n\"currentScreen\": \"4\",\n\"questionID\": \"245178050680.2\",\n\"questionType\": \"aggregated_all_possible_answers\",\n\"choices\": [\"\u0623\", \"\u0628\", \"\u062c\", \"\u062f\"],\n\"totalInteractions\": 1,\n\"interactions\": {\n    \"\u0623\": {\n        \"count\": 1,\n        \"percentage\": 100,\n        \"answer\": \"\u0623\"\n    },\n    \"\u0628\": {\n        \"count\": 0,\n        \"percentage\": 0,\n        \"answer\": \"\u0628\"\n    },\n    \"\u062c\": {\n        \"count\": 0,\n        \"percentage\": 0,\n        \"answer\": \"\u062c\"\n    },\n    \"\u062f\": {\n        \"count\": 0,\n        \"percentage\": 0,\n        \"answer\": \"\u062f\"\n    }\n},\n\"correctAnswers\": [], // always empty array\n\"currentStudentAnswer: \"\u0623\", // or null if the student didn't answer\n\"messageKey\": \"interactionUpdated\"\n}\n</code></pre> Output object if the question type is <code>separated</code> <pre><code>{\n\"currentScreen\": \"9\",\n\"questionID\": \"363128187320\",\n\"questionType\": \"separated\",\n\"choices\": [], // seperated questions don't have choices\n\"totalInteractions\": 1,\n\"interactions\": [\n    {\n        \"answer\": \"43242\",\n        \"studentID\": \"111111111111\",\n        \"studnetName\": \"the educator\"\n    }\n],\n\"correctAnswers\": [], // always empty array (for now :D)\n\"currentStudentAnswer: \"43242\", // or null if the student didn't answer\n\"messageKey\": \"interactionUpdated\"\n}\n</code></pre>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#handling-insight-data-recived-using-the-getinsights-function","title":"Handling Insight data recived using the <code>getInsights</code> function?","text":"<ol> <li>Clear the answers list and the answersStatistic map and set the isThereActiveQuestion, isAnswered, and isDisabled to false.</li> <li>Parses the JSON string that is passed from the WebView to a map</li> <li>Gets the \u201cquestionID\u201d  from the map, which is the current question selected by the educator</li> <li>Gets the questionType from the map which is the type of the question, it can be <ol> <li>aggregated_all_possible_answers</li> <li>aggregated_only_student_answers</li> <li>Separated</li> </ol> </li> <li>Gets the screenId from the map, which is the current screen (slide) that the educator is in and sharing </li> <li>Get the totalInteractions which is the total question answer.</li> <li>Gets the interactions, which is a map that contains:<ol> <li>Count</li> <li>Percentage</li> <li>Timestamp</li> <li>Answer  </li> <li>studentName</li> </ol> </li> <li>Then it iterates over the interactions map and for each answer, it takes the count, percentage, timestamp, answer, and studentName from the answer object </li> <li>Check if the questionType is separated or not and then add the answer to the answersStatistic map with the answer as a key and a StatisticEntity as a value </li> <li>Emits a QuestionGotten state</li> </ol>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#questions-types","title":"Questions Types","text":"Question Type Description Aggregated_all_possible_answers This type is for multiple-choice questions (MCQs), where all the answer options are displayed, along with the percentage of students who selected each option in the insights. Aggregated_only_student_answers This type is for multiple-response questions (MRQs), where students can choose more than one answer. For example, if students choose options \"ab,\" \"ac,\" and \"cd,\" only these selected choices are shown in the insights. If no students select an option like \"bd,\" it won't appear in the insights. Separated This type is for questions with input boxes, where students provide text-based answers. All the submitted answers are displayed in the insights. Questions Insights Types <p><code>getInsights</code> path : lib/features/sessions/presentation/logic/engagement/engagement_cubit.dart</p>"},{"location":"nagwa_sessions/session/session_technical/questionHandling/#counting-number-of-students-who-didnt-answer-yet","title":"Counting Number of Students Who Didn\u2019t Answer Yet","text":"<p>In order to display the number of students who haven\u2019t answered yet, we have developed a function <code>getRemainingStudents</code> that checks if the number of answered students is greater than the number of online students and returns 0. Otherwise, it returns the difference between the number of online students and the number of answered students </p> Counting Number of Students Who Didn\u2019t Answer Yet <p></p>"},{"location":"nagwa_sessions/session/session_technical/sessionsList/","title":"Upcoming and Running Sessions List","text":"<p>The educator has access to a centralized location where he can view a list of currently running and upcoming sessions. This list provides essential details such as the session name, date, and duration for each session.</p> Currently Running &amp; Upcoming Sessions List Screen <p></p>"},{"location":"nagwa_sessions/session/session_technical/sessionsList/#retrive-sessions-list-flowchart","title":"Retrive Sessions List Flowchart","text":"Getting Session\u2019s List Flowchart <p>The <code>getSessions</code> function plays a crucial role in fetching a list of sessions that the student had registered for from our API <code>sessions/open</code>. This function communicates with the API and retrieves the necessary data about the sessions associated with the student's account. Once the data is obtained, it can be used to populate the centralized view, showing the educator all the relevant details.</p> Function Name getSessions Function Required Parameters userId Function Return List of \"sessions\" that contains:             <ul> <li>sessionId</li> <li>educatorId</li> <li>educatorName</li> <li>title</li> <li>startDate</li> <li>statusId</li> <li>statusName</li> <li>durationInMinutes</li> <li>subjectId</li> <li>subjectName</li> <li>fileId</li> <li>sessionProvider</li> <li>extension</li> <li>iconUrl</li> <li>studentsCount</li> </ul>"},{"location":"nagwa_sessions/session/session_technical/sessionsList/#fetch-sessions-list-api","title":"Fetch Sessions List API","text":"API Endpoint sessions/open HTTP Method GET API Headers api-version: \"6\" API Query Parameters <ul> <li>userId</li> <li>pageSize [Number of returned sessions (set it to a big number, ex. 100)]</li> <li>pageNumber [Start index (set it to 1)]</li> </ul>"},{"location":"nagwa_sessions/session/session_technical/sessionsList/#fetch-session-list-api-response","title":"Fetch Session List API Response","text":"API Response (sessions/open) Key Description sessionId Number that represents the ID of the session educatorId Number that represents the ID of the educator title String that represents the title of the session educatorName String that represents educator name startDate Date that represents the start date of the session studentsCount Number of the students who can attend session studentsCountUnit statusId Number that represents session status Id statusName String represents the status of session ex. scheduled, In-Progress statusNameLocalized durationInMinutes Number that represents session planned duration in minutes durationInMinutesUnit subjectId Number that represents the subject ID subjectName String that represents subject name which session assigned to sessionProvider String represents session webRTC provider, in our case, its Agora extension Number represents the additional time that can be added to a session if the default duration is completed. iconUrl String that represents the session image URL fileId Number that represents the ID of the file that contains session materials (zip file id)"},{"location":"nagwa_sessions/session/session_technical/startingSession/","title":"Starting Session","text":"<p>When it\u2019s session time, the start button located on the session card becomes active, and the  educator can click the \"Start\" button to begin the session. Once they click the button, we call our \u201csessions/start\u201d endpoint to start the session and make it visible to the class students so that they can join the session.</p>"},{"location":"nagwa_sessions/session/session_technical/startingSession/#starting-session-api","title":"Starting Session API","text":"Starting Session API API Endpoint sessions/start HTTP Method POST API Required Data <ul> <li>educatorId</li> <li>sessionId</li> </ul> API Headers api-version:6 API Response <ul> <li>actualStartDate</li> <li>rtcToken</li> <li>rtmToken</li> <li>sessionId</li> </ul>"},{"location":"nagwa_sessions/session/session_technical/startingSession/#starting-session-flowchart","title":"Starting Session Flowchart","text":"Start Session Flowchart"},{"location":"nagwa_sessions/session/session_technical/startingSession/#starting-session-function","title":"Starting Session Function","text":"Function Name startSession Function Required Parameters <ul> <li>educatorId</li> <li>sessionId</li> </ul> Function Return Parameters <ul> <li>startedSessionDuration</li> <li>rtcToken</li> <li>rtmToken</li> <li>sessionId</li> </ul> If the class has no students enrolled, then the educator cannot start the session <code>startSession</code> Function Path <p>The <code>startSession</code> function is located at the <code>ib/features/sessions/data/data_sources/sessions/sessions_remote_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/session/session_technical/startingSession/#creating-session-notifier","title":"Creating Session Notifier","text":"<p>Upon calling the start API, a call to <code>createSessionNotifier</code> method is used to create a notifier for the session in progress it requires the (<code>educatorId</code>, <code>sessionId</code>) to create the notifier.</p> <ol> <li>It creates an instance of the collection \"sessions_in_progress\" in the Firestore database.</li> <li>It creates a document name equal to the (educatorId) and sets the data of the document to the <code>sessionNotifierParams</code> which are the (educatorId, sessionId and the status of the session) which in this case is <code>in_progress</code>.</li> </ol>"},{"location":"sabboura/","title":"Sabboura","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/testing-mkdocs/","title":"Testing Mkdocs","text":""}]}