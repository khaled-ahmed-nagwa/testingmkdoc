{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Nagwa Documentation","text":"<p>Warning</p> <p>If you wish to access diagrams, you must verify your identity by logging in with your work email ending with '@nagwa.com' Once logged in, you will have access to view the diagrams.</p>"},{"location":"#who-should-read-this-documentation","title":"Who Should Read This Documentation? \ud83e\udd14","text":"<p>This documentation provides a concise business and technical overview of several Nagwa products. It is designed for a diverse audience, including new developers joining the development team, top management executives, product business managers, and content technologies teams at Nagwa Technologies. Whether you're interested in the technical aspects or a business perspective, this document will provide valuable insights into how Nagwa is transforming education using Nagwa sessions.</p> <p>Check Out Our Documentation Site</p>"},{"location":"#evaluation","title":"Evaluation","text":"Loading\u2026"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/09/09/this-might-be-a-good-start/","title":"This Might Be a Good Start \ud83e\udd29","text":"<p>As our documentation projects grow in size, using a single Google Docs file is becoming inefficient. It's challenging for readers to navigate lengthy documents, and tracking changes may become problematic</p> <p>To address this, I've found MkDocs, an open-source Python tool. It offers a 'material' theme with extensive customization options, making it a superior choice for creating organized and user-friendly documentation websites. This proposal explores the benefits of switching to MkDocs. Helle world</p>"},{"location":"blog/2023/09/10/this-blog-to-test-long-blog/","title":"This Blog To Test Long Blog \ud83e\uddea","text":"<p>As our documentation projects grow in size, using a single Google Docs file is becoming inefficient. It's challenging for readers to navigate lengthy documents, and tracking changes may become problematic</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Nunc non blandit massa enim nec dui nunc. Commodo nulla facilisi nullam vehicula ipsum a arcu cursus. In vitae turpis massa sed elementum tempus egestas sed sed. Neque vitae tempus quam pellentesque nec nam. In hac habitasse platea dictumst. Turpis in eu mi bibendum neque egestas congue quisque egestas. Consequat interdum varius sit amet mattis vulputate. In hac habitasse platea dictumst quisque sagittis purus sit. Elementum eu facilisis sed odio morbi quis commodo odio. Ac tortor vitae purus faucibus ornare. Pellentesque habitant morbi tristique senectus et. Fermentum iaculis eu non diam phasellus. In ornare quam viverra orci sagittis eu. Sit amet commodo nulla facilisi nullam vehicula ipsum. Urna duis convallis convallis tellus id interdum velit laoreet. In tellus integer feugiat scelerisque varius morbi. Egestas sed sed risus pretium quam vulputate dignissim suspendisse. Vestibulum sed arcu non odio euismod lacinia.</p> <p>Vestibulum sed arcu non odio. Mauris a diam maecenas sed. Sit amet consectetur adipiscing elit ut aliquam purus. Eget est lorem ipsum dolor sit amet consectetur adipiscing. Viverra justo nec ultrices dui sapien eget mi proin. Egestas congue quisque egestas diam in arcu cursus euismod. Urna porttitor rhoncus dolor purus. Dictum non consectetur a erat nam. Pharetra convallis posuere morbi leo urna molestie at elementum. Risus nullam eget felis eget nunc lobortis mattis aliquam faucibus. Sociis natoque penatibus et magnis dis parturient montes nascetur. In massa tempor nec feugiat nisl pretium.</p> <p>Mauris in aliquam sem fringilla. Ut porttitor leo a diam. Facilisis gravida neque convallis a cras semper auctor. Mauris rhoncus aenean vel elit scelerisque mauris pellentesque pulvinar. At erat pellentesque adipiscing commodo elit. Mi ipsum faucibus vitae aliquet nec ullamcorper sit. Mi tempus imperdiet nulla malesuada pellentesque elit eget gravida. Ultrices tincidunt arcu non sodales neque sodales ut etiam sit. Tellus orci ac auctor augue mauris augue neque gravida in. A arcu cursus vitae congue mauris rhoncus.</p> <p>Cursus sit amet dictum sit amet justo. Tellus in hac habitasse platea dictumst vestibulum rhoncus. Tristique magna sit amet purus gravida quis blandit turpis. Velit aliquet sagittis id consectetur purus ut faucibus. Ut pharetra sit amet aliquam id diam. Adipiscing commodo elit at imperdiet dui accumsan sit amet nulla. Non enim praesent elementum facilisis leo vel fringilla. Hac habitasse platea dictumst vestibulum rhoncus est pellentesque elit ullamcorper. Suspendisse potenti nullam ac tortor. Quisque non tellus orci ac. Consequat mauris nunc congue nisi vitae suscipit tellus mauris a. Pulvinar proin gravida hendrerit lectus a. Fames ac turpis egestas integer eget aliquet nibh. Nisl nisi scelerisque eu ultrices. In ante metus dictum at. Volutpat ac tincidunt vitae semper quis lectus nulla at. Tortor condimentum lacinia quis vel eros donec ac odio tempor. </p>"},{"location":"nagwa_sessions/","title":"Nagwa Session (For Eductors) \ud83d\udc68\ud83c\udffb\u200d\ud83c\udfeb","text":""},{"location":"nagwa_sessions/#project-overview","title":"Project Overview","text":"<p>Nagwa's primary objective is the enhancement of education through interactive and engaging learning experiences for students. The Nagwa Sessions app serves as a platform designed to empower educators to conduct live online teaching sessions effectively, equipped with a comprehensive set of tools that facilitate optimal session delivery. We are confident that the Nagwa Sessions app possesses all the essential components required to foster interactive online teaching. This is achieved by fostering ongoing student engagement in the learning process, facilitated through the seamless sharing of questions and active participation.</p>"},{"location":"nagwa_sessions/#objective","title":"Objective","text":"<p>Our main goal is to change education for the better through a new educational platform. We want this app to help educators by giving them many different tools to improve online teaching. This will help to create teaching and learning experiences that are educational and meaningful. We also want to make sure that this app is easy to use, providing educators with all the tools they need to teach effectively online.</p>"},{"location":"nagwa_sessions/#target-audience","title":"Target Audience","text":"<p>The Nagwa Sessions app is specifically tailored to be used by educators who will deliver online live sessions with class students via the Nagwa Classes mobile app.</p>"},{"location":"nagwa_sessions/#tools-used","title":"Tools Used","text":"<ul> <li>Dart &amp; Flutter</li> <li>Firebase</li> <li>Agora for voice and chat messages</li> <li>Different packages that support bloc pattern, local storage, responsive UI, localization, chat, connection status, forms validation, etc.</li> </ul>"},{"location":"nagwa_sessions/key_features/","title":"Nagwa Sessions - Key Features","text":""},{"location":"nagwa_sessions/key_features/#diagram","title":"Diagram","text":"Main Session Features Diagram"},{"location":"nagwa_sessions/key_features/#key-features","title":"Key Features","text":""},{"location":"nagwa_sessions/key_features/#authentication","title":"Authentication","text":""},{"location":"nagwa_sessions/key_features/#login","title":"Login","text":"<ul> <li>Educators can log in easily using the email and password.</li> <li>When educators try to log in for the first time after receiving the email from the portal admin, they will be prompted to set a password. This password will become their permanent account password.</li> </ul>"},{"location":"nagwa_sessions/key_features/#reset-password","title":"Reset Password","text":"<ul> <li>If an educator forgets their password, they can only reset it by contacting the portal admin, who will assist in resetting the password for them.</li> </ul>"},{"location":"nagwa_sessions/key_features/#session-feature","title":"Session Feature","text":""},{"location":"nagwa_sessions/key_features/#sessions-overview","title":"Sessions Overview","text":"<ul> <li>Educators can view a clear listing of ongoing and upcoming sessions.</li> <li>Session details include start time, duration, and the number of enrolled students.</li> <li>Once the session's start time arrives, educators can initiate it, and students can join.</li> <li>Educators have the option to cancel the session before starting it. This action removes the session from the list of the upcoming sessions.</li> <li>Educators have the authority to end sessions at any time. This action removes participants and the session from the list.</li> </ul>"},{"location":"nagwa_sessions/key_features/#interactive-question-engagement","title":"Interactive Question Engagement","text":"<p>One of the primary and powerful tools within the session is interactive question sharing and answering. Educators can share pre-designed questions with their students, fostering active participation. Students directly respond within the drawing area, indicating their choices. This enables educators to access insightful responses from students instantly.</p> <ul> <li>Before the session starts, the educator needs to prepare the session material which includes the questions along with the slides.</li> <li>Educators can share a variety of question types and students can answer in real time.</li> <li>Educators retain control over student engagement with the question, with the capability to start or stop students from answering at any moment.</li> <li>The app displays students' answers in real-time, along with a live count of students who haven't answered the question yet.</li> <li>Once the educator ends the question answering state, they can view comprehensive insights into student answers. This information can then be shared with the students, fostering a deeper understanding of the collective response.</li> </ul>"},{"location":"nagwa_sessions/key_features/#live-drawing","title":"Live Drawing","text":"<p>Educators can utilize live drawing features, allowing them to draw on the screen in real time. These drawings are instantly shared with the students. Educators have access to various drawing tools, enabling them to use different pens, colors, and thickness options.</p> <ul> <li>Educators have the flexibility to undo, redo, reset, and erase drawings, ensuring a smooth and interactive teaching process.</li> <li>Educators have the freedom to choose from a variety of colors and thickness options when drawing on the screen.</li> </ul> <p>Only Apple Pencils Are Supported \u270f\ufe0f</p> <p>Currently, the ability to draw is limited to the use of an Apple Pencil. This means that educators can only make drawings using an Apple Pencil and no other method is available.</p>"},{"location":"nagwa_sessions/key_features/#communication-channels","title":"Communication Channels","text":""},{"location":"nagwa_sessions/key_features/#voice-communication","title":"Voice Communication","text":"<ul> <li>The educator can speak directly to students using voice. He can mute or unmute their microphone as needed.</li> <li>The student can communicate using voice, but first, he needs to obtain permission from the educator, The educator can revoke (mute) speaking permission at any time.</li> </ul> <p> Raising Hands  \ud83d\ude4b </p> <p>Students can signal their desire to participate by raising their hands, indicating their intention to speak. Once a student raises their hand, they request permission to speak. The educator is then notified of the student's request and can decide whether to grant or deny permission for the student to speak. If permission is granted, the student can unmute their microphone and engage in verbal communication with the educator.</p>"},{"location":"nagwa_sessions/key_features/#text-message","title":"Text Message","text":"<ul> <li>Students can send messages in the live chat, which can be read by the educator. However, The educator do not have the ability to send text messages in the chat.</li> </ul> <p>Text Messages Feature Can Be Disabled \u274c</p> <p>The educator has the ability to enable or disable the text chat feature. When this functionality is disabled, no one can send a text message.</p>"},{"location":"nagwa_sessions/key_features/#handling-internet-connection-issues","title":"Handling Internet Connection Issues","text":"<p>We understand the importance of keeping educators informed about any network issues that may impact the student experience. To ensure this, educators receive notifications for internet connection issues. The app also makes continuous attempts to reconnect educators to the session, minimizing any disruption.</p>"},{"location":"nagwa_sessions/key_features/#block-students","title":"Block Student/s","text":"<p>Educators have the ability to block specific students from the session. This action immediately removes the student from the session and prevents them from re-entering.</p>"},{"location":"nagwa_sessions/key_features/#multiple-accounts","title":"Multiple Accounts","text":"<p>The Educator can register multiple accounts in the app, and switch between them when needed.</p>"},{"location":"nagwa_sessions/key_features/#time-reminder","title":"Time Reminder","text":"<p>Educators can view a timer that displays the session duration, indicating the time since the session started. As the session approaches its end (last hour), the timer turns into a red  timer, and starts indicating the remaining time.</p>"},{"location":"nagwa_sessions/authentication/","title":"Authntication Process","text":"<p>Authentication is a crucial aspect of our system, providing educators with secure and streamlined access to the Nagwa Sessions app. Here's an overview of the process:</p> <ul> <li>Account Registration: The registration process is done through our portal. When a new educator signs a contract with Nagwa, the team will create an account for him and provide him with a login email.</li> <li>Initial Login: Educators can log in to the app for the first time. using their registered email that was provided by the portal admin.</li> <li>Upon initial login, educators are prompted to set a new password, replacing the initial one. This new password becomes the account password.</li> <li>For the next logins, educators simply enter their email and account password, after that, they will be routed to the sessions listing page.</li> </ul> <p>This authentication process ensures the security of educator accounts while offering a user-friendly experience, allowing educators to access the app effortlessly.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/getSavedUsersLocally/","title":"Getting Stored Users Locally","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/getSavedUsersLocally/#function-flowchart","title":"Function Flowchart","text":"<code>getSavedUsers</code> Function Flowchart The <code>getSavedUsers</code> Function Path <p>the <code>getSavedUsers</code> is located at the <code>lib/features/authentication/data/local/data_sources/authentication_local_data_source_impl.dart</code> path.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/getSavedUsersLocally/#getsavedusers-function-return","title":"<code>getSavedUsers</code> Function Return","text":"Function Return                  List of <code>UserEntity</code> objects that contains:                 <ul> <li>userID</li> <li>portalId</li> <li>username</li> <li>firstName</li> <li>lastName</li> <li>status</li> <li>roles</li> <li>phoneNumber</li> <li>countryPhoneCode</li> <li>language</li> <li>country</li> <li>portalType</li> <li>imageUrl</li> <li>portalCurrency</li> <li>portalTimeZone</li> </ul>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/","title":"Login Process: Validating Username","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/#process-overview","title":"Process Overview","text":"<p>After logging into the application, the user will be routed to the username (email) input screen. This screen is the first screen that the user sees when they open the app for the first time or after logging out. The page asks the user to enter their username, after clicking the <code>Continue</code> button, it will check the validity of the entered username.</p> <ul> <li>If the entered username is not registered to the app, an error message will be displayed informing the user that the email is not registered on the portal.</li> <li>If a student username was entered, an error message will be shown indicating that this account is not authorized to access the app.</li> <li>If the account is already logged in to the app, an alert dialog will be shown that asks the educator if he wants to switch to that account.</li> </ul> <p>Checking If User Exsits \ud83d\udd0d ?</p> <p>Checking if an account exists on a local device is done by calling the <code>isUserExistByUsername</code> method, which checks the local storage (Hive) for the entered username.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/#username-verification-function-flowchart","title":"Username Verification Function Flowchart","text":"Username Verification Flowchart \ud83d\udc68\u200d\ud83d\udcbb <code>usernameLogin</code> Function Variable Parameters Type Function Required Parameters <code>username</code> String Function Return Parameters          - <code>portalID</code>         - <code>userID</code>         - <code>needPasswordReset</code>         - <code>resetToken</code>         - <code>isPhoneVerified</code>         - <code>status</code>         - <code>roles</code>          String         int         Bool         String         Bool         int         List of Strings"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/#username-verification-api","title":"Username Verification API","text":"API Endpoint Details Category Name Data Type API Endpoint users/verification API Query Parameters username HTTP Method GET API Response result A list that contains the following  - portalID int - userID int - needPasswordReset bool - resetToken string - isPhoneVerified bool - status int - roles list - accountStatus String - suffix String - portalType int <p>Allowed Roles to Access The Application</p> <p>You may have noticed that the username verification API returns a 'roles' list. This list contains the roles associated with the username within the portal. Currently, the allowed roles are limited to <code>'teacher', 'tutor', 'assistant'</code> Any other role will not grant access to continue logging into the application.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/login_validatingUsername/#login-screenshots","title":"Login Screenshots","text":"Inserting Username Screen Different Validation Messages"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataLocally/","title":"Saving User Data Locally","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataLocally/#function-flowchart","title":"Function Flowchart","text":"Saving Data Locally Flowchart The <code>saveUsers</code> Function Path <p>the <code>saveUsers</code> is located at the <code>lib\\features\\authentication\\data\\local\\data_sources\\authentication_local_data_source_impl.dart</code> path.</p> Saving User Data Locally Function Required Parameter <code>users</code> [list of UserEntitiy Objects that need to be saved] Function Return <code>Bool</code> [Spacify whether the save done or not]"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataProcess/","title":"Saving User Data Locally","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataProcess/#process-steps","title":"Process Steps","text":"<p>To save the user information to local storage, we are using <code>Hive</code> to store the information locally.</p> <pre><code>1. we first use the `getSavedUsers` function to retrive the stored users locally\n2. Call the `verifyUsername` function from the remote data source to get the list of users that have the same username and password\n3. Add the users from the API response to the users from the local data source, then remove the duplicates from the list of users\n4. Check the index of the user that should be the first user in the list and if it is not the first user, we remove it from the list and add it to the first index\n5. Save the list of users in the local data source\n</code></pre>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataProcess/#getsaveduser","title":"GetSavedUser","text":"<p>The <code>getSavedUsers</code> is used to get the saved users from the local database and return it as a list of UserEntity objects, it uses Hive to open the box and get the users objects from it, then it converts the users object to a list of UserEntity objects. and returns it.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/savingUserDataProcess/#saveusers","title":"SaveUsers","text":"<p>The <code>saveUsers</code> is used to save the users in the local database, it uses Hive to open the box and save the users object in it. it converts the user's object to a list of JSON objects and saves it in the box. and returns true if the process is done successfully. </p> <p>More information are coming in the next section regarding how we store and retrive users data locally</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/settingPassword_firstTime/","title":"Setting Password For The First Time 1\ufe0f\u20e3","text":"<p>When an educator logs into the application for the first time after registering, they will need to enter their email address and initial password. Once their email address and password are verified, they will be prompted to create a new password that will become their account password.</p> Setting Password For the First Time Screen <p></p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/settingPassword_firstTime/#setting-password-api","title":"Setting Password API","text":"Resetting Password API API Endpoint <code>users/reset-password-confirmation</code> HTTP Method <code>POST</code> API Required Data <code>token</code> <code>password</code>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/","title":"Login Process (Validating Password)","text":""},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#overview","title":"Overview","text":"<p>After ensuring the existence &amp; authentication of the username in the previous step, the educator will be routed to insert his account password</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#inserting-password-screenshots","title":"Inserting Password Screenshots","text":"Inserting Password Screenshot Incorrect Password Error \u26a0\ufe0f Screenshot"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#flowchart","title":"Flowchart","text":"Verify Username &amp; Password Function Flowchart"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#verify-username-password-api","title":"Verify Username &amp; Password API","text":"Verify Username &amp; Password API API Endpoint <code>users/login</code> HTTP Method <code>POST</code> API Required Data <ul> <li><code>loginName </code> </li> <li><code>password</code> </li> <li><code>portalId</code> </li> </ul> API Response <code> result</code>  list that contains the following:       <ul> <li><code>portalID </code> </li> <li><code>code</code> </li> <li><code>userName</code> </li> <li><code>firstName</code> </li> <li><code>lastName</code> </li> <li><code>accountStatus</code> </li> <li><code>status</code> </li> <li><code>country</code> </li> <li><code>language</code> </li> <li><code>phoneNumber</code> </li> <li><code>dialCode</code> </li> <li><code>roles</code> </li> </ul>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#verifyusername-function","title":"<code>verifyUsername</code> Function","text":"verifyUsername Function Function Required Parameters <ul> <li>userId</li> <li>username</li> <li>password</li> <li>portalId</li> </ul> <ul> <li>Int</li> <li>String</li> <li>String</li> <li>Int</li> </ul> Function Return Parameters              List of `UserEntity` Object that contain             <ul> <li>userID</li> <li>portalId</li> <li>username</li> <li>firstName</li> <li>lastName</li> <li>status</li> <li>roles</li> <li>phoneNumber</li> <li>countryPhoneCode</li> <li>language</li> <li>country</li> <li>portalType</li> <li>imageUrl</li> <li>portalCurrency</li> <li>portalTimeZone</li> </ul>              List of Objects             <ul> <li>Int</li> <li>Int</li> <li>String</li> <li>String</li> <li>String</li> <li>Int</li> <li>List</li> <li>String</li> <li>String</li> <li>String</li> <li>String</li> <li>Int</li> <li>String</li> <li>String</li> <li>String</li> </ul> <code>verifyUsername</code> Function Path <p>the <code>verifyUsername</code> is located at the <code>lib/features/authentication/data/remote/data_sources/authentication_remote_data_source_impl.dart</code> path.</p> <p>You can notice that inside the <code>verifyUsername</code> function, a call to the <code>_getUserPortalInfo</code> function is made to retrieve the full list of the user portal information.</p>"},{"location":"nagwa_sessions/authentication/auth_technicalComponents/validatingPassword/#get-user-portal-information-api","title":"Get User Portal Information API","text":"Get User Portal Information API Field Description API Endpoint user/UserInfo/$userId HTTP Method GET API Headers api-version: 1 API Response result (containes the following) portalInfo A list that contains the following:                  <ul> <li>portalId</li> <li>clusterId</li> <li>title</li> <li>subtitleLanguage</li> <li>language</li> <li>country</li> <li>countryTitle</li> <li>logoExtension</li> <li>logoURL</li> <li>videosSubtitle</li> <li>timeZone</li> <li>timeZoneDisplayName</li> <li>isActive</li> <li>priceCountry</li> <li>portalCurrency</li> <li>isPaid</li> <li>type</li> <li>nextType</li> <li>pricePerStudent</li> </ul> userInfo A list that contains the following:                 <ul> <li>portalID</li> <li>code</li> <li>userName</li> <li>firstName</li> <li>lastName</li> <li>accountStatus</li> <li>status</li> <li>country</li> <li>language</li> <li>phoneNumber</li> <li>countryPhoneCode</li> <li>roles</li> </ul> Response From the <code>user/UserInfo/$userId</code> API <pre><code>    {\n\"success\": true,\n\"resultCode\": 200,\n\"errorCode\": null,\n\"result\": {\n\"portalInfo\": {\n\"portalId\": 129139714843,\n\"clusterId\": 0,\n\"title\": \"Nagwa Classes\",\n\"subtitleLanguage\": null,\n\"language\": \"ar\",\n\"country\": \"eg\",\n\"countryTitle\": \"\u0645\u0635\u0631\",\n\"logoExtension\": \".png\",\n\"logoURL\": \"https://s3.amazonaws.com/files-portals.nagwa.com/images/portals-logo/129139714843.png\",\n\"videosSubtitle\": null,\n\"timeZone\": \"Arab Standard Time\",\n\"timeZoneDisplayName\": \"(UTC+03:00) Arabian Standard Time (Riyadh)\",\n\"isActive\": \"1\",\n\"priceCountry\": \"eg\",\n\"portalCurrency\": \"EGP\",\n\"isPaid\": false,\n\"type\": 4,\n\"nextType\": null,\n\"pricePerStudent\": 20.00\n},\n\"userInfo\": {\n\"portalID\": 129139714843,\n\"code\": 496182456783,\n\"userName\": \"teacher.dina.ali@gmail.com\",\n\"firstName\": \"Teacher Dina\",\n\"lastName\": \"Ali\",\n\"accountStatus\": \"Active\",\n\"status\": 1,\n\"country\": \"eg\",\n\"language\": \"ar\",\n\"phoneNumber\": null,\n\"countryPhoneCode\": null,\n\"gradeId\": 0,\n\"token\": null,\n\"roles\": [\n\"Teacher\"\n]\n}\n},\n\"errors\": []\n}\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/","title":"Pre-Knowledge Required Before Technical Dealing With Sessions","text":"<p>As you may be aware, we seamlessly integrate various services and tools to enhance the experience of conducting live sessions between instructors and students. It's essential to take a closer look at these tools before diving deep into the session features.</p> Are you willing to skip this section  \ud83d\ude44  <p>If you're a developer eager to expand your knowledge of the session feature, it's highly recommended to dive into this section. It will equip you with a thorough understanding of various aspects related to the session feature. Keep in mind that the definitions presented here won't be repeated in the following sections, so it's essential to grasp them here.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/","title":"HTML Rendering Engine","text":"<p>To support the drawing/handling actions functionality while conducting the session, we depend on our customized \u201cHTML Rendering Engine\u201d. The rendering engine is responsible for displaying drawings, visualizations, activities, and questions within the application.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/#main-features","title":"Main Features","text":"<ol> <li>Drawing Tools: Educators have access to a range of drawing tools, including various colors and sizes for creating visuals.</li> <li>Undo, Redo, and Reset: Educators can undo or redo actions while drawing or editing, and they can also reset the canvas to its original state.</li> <li>Clear Screen: A simple option to clear the canvas and return to the default settings</li> <li>Question Engine Support: The engine is capable of rendering and displaying questions for students to answer.</li> <li>Activities Engine Support: Interactive activities can be rendered by the engine, allowing users to participate actively.</li> <li>Firebase Data Syncing: The engine seamlessly syncs data with the Firebase platform, ensuring efficient data management.</li> </ol>"},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/#main-technologies-used","title":"Main Technologies Used","text":"<p>The HTML rendering engine is built using:</p> <ul> <li>React</li> <li>Redux Toolkit</li> <li>Firebase</li> <li>Webpack</li> <li>Babel.</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/#engine-main-function","title":"Engine Main Function","text":"Main Events &amp; Functions Description <code>NagwaRenderingEngine.updateScreen('SCREEN_ID')</code> Call this function if you want to update the currently active screen and ensure that the changes are                 also updated in Firebase. <code>NagwaRenderingEngine.changeTool({color: 'red',strokeWidth: 3,})</code> Call this function to update the currently active tool or pen with a new color, size, or type and                 start using it inside the app view. The function takes an object as a parameter that may contain any                 of these three properties: color, strokeWidth, type. Type can contain [Draw, DeletePart, or Normal.]              <code>NagwaRenderingEngine.undo()</code> This function allows you to perform an undo action for your last action and remove it within the                 application. By calling the undo() function, you can effortlessly revert the most recent action and                 continue undoing previous actions if necessary. <code>NagwaRenderingEngine.redo()</code> This function enables you to redo your last undo action and retrieve it. With the help of our redo                 stack, which tracks all your undo actions during the current session, you can perform multiple redo                 actions as needed. Restoring changes that were previously undone becomes effortless. <code>NagwaRenderingEngine.clearScreen()</code> Call the clearScreen() function to clear the entire current screen view. Important to note that                 executing this action will remove all content, including drawings and images, from the current                 screen. <code>NagwaRenderingEngine.agoraStarted()</code> Call this function to send a message to the engine indicating that Agora has started. This action                 will trigger the agoraStarted message. <code>NagwaRenderingEngine.updateChatStatus(false||true);</code> Use this function if you want to update the chat status and enable or disable it. By calling this                 function with false, you can disable the chat feature, and with true, you can enable it again. <code>NagwaRenderingEngine.updateCurrentQuestionAskingStatus('value');</code> Use this function if you want to update the current question status to be whether Initial,                 In_Progress, or Time_Is_Up."},{"location":"nagwa_sessions/pre_knowledge_required/html_renderingEngine/#engine-main-events","title":"Engine Main Events","text":"Engine Events Description <code>engineLoaded</code> This event will be fired when the engine is fully loaded and ready for use. It serves as an indication that all necessary components have been initialized, and you can now start interacting with the engine and its functionalities. <code>currentScreenUpdated</code> This event will be fired whenever the current screen receives new data from Firebase and is updated accordingly. This event serves as a notification that the screen content has changed, allowing you to synchronize your view with the latest data received from Firebase. <code>interactionUpdated</code> This event will be fired when the current screen receives new interaction data from Firebase. Use this event to update your view and provide an interactive user experience. <code>drawingToolsUpdated</code> This event is fired when the current screen receives new drawing tools data from Firebase. <code>questionAskingStatusUpdated</code> This event will be fired when the questionAskingStatus status is updated. <code>agoraStarted</code> This event will be fired when the Agora starts. <code>chatStatusUpdated</code> This event will be fired when the chat status is updated. <code>historyStatusUpdated</code> This event will be fired when the history status is updated, used to handle empty undo/redo stacks. <code>logMsg</code> This event will be fired when the engine has new logs. Want to Learn More ! \ud83e\udd29 <p>If you're eager to explore more about the HTML rendering engine, please navigate to the next page, which contains comprehensive details about the engine, along with a comprehensive list of examples showcasing its events and functions.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/","title":"HTML Rendering Engine","text":"<p>The Rendering Engine is a powerful tool that enables the creation and display of drawings, visualizations, activities, and questions. The engine is used with the \"Nagwa Classes\" app to support the \"session\" feature.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#key-features-of-the-html-rendering-engine","title":"Key Features of the HTML Rendering Engine","text":"<ul> <li>Draw using different colors and sizes with easy-to-use tools.</li> <li>Easily undo or redo changes to perfect your creations.</li> <li>Quickly clear the canvas for a fresh start.</li> <li>Engage users with interactive questions with Question Engine Support.</li> <li>Keep the audience interaction with exciting activities supported by the Activities Engine.</li> <li>Keep data in sync with Firebase for real-time collaboration and accessibility.</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#main-technologies","title":"Main Technologies","text":"<ul> <li>React: The foundation of the Rendering Engine, providing a dynamic user interface.</li> <li>Redux Toolkit: Empowers efficient state management for a smooth user experience.</li> <li>Firebase: Enables real-time data synchronization and storage in the cloud.</li> <li>Wepack: Bundles and optimizes the application for improved performance.</li> <li>Babel: toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#list-of-our-s3-buckets","title":"List of Our S3 Buckets","text":"<ul> <li>nagwa-sessions-dev for the beta engine build</li> <li>nagwa-sessions-prod for the production engine build</li> <li>visualizations.nagwa.com/rendering-engine-packages for the engine package</li> <li>visualizations.nagwa.com/rendering-engine for the demo app</li> </ul>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#how-to-use-the-engine","title":"How to use the engine","text":""},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#initialization","title":"Initialization","text":"<p>In the following example, you will find a code snippet that initializes the rendering engine to establish a connection with the session Firestore and retrieve all the necessary data. Additionally, you'll download the session package to initiate your session smoothly.</p> <pre><code>window.NagwaRenderingEngine.init({\nname: 'Mohamed Ahmed Mahmoud',\nrole: 'educator', // the role of the current user to preview whether `educator` or `student`\nrootElementID: 'root', // the id of the root element to render the engine inside it and if not passed it will be `root`\nuserID: '', // the current user id\nsessionID: '347817452421322', // the current session id\npackageBasePath: '/347817452421322', // the base path of the package to download the package\nenginesBasePath: '/engines_base_path', // the base path of the engines\nfirebaseConfig: {\napiKey: 'API KEY',\nauthDomain: 'AUTH DOMAIN',\nprojectId: 'PROJECT ID',\nstorageBucket: 'STORAGE BUCKET',\nmessagingSenderId: 'MESSAGING SENDER ID',\nappId: 'APP ID',\n},\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#engine-api","title":"Engine API","text":""},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#updatescreenscreenid","title":"updateScreen(screenID)","text":"<p>You need to call this function if you want to update the currently active screen and ensure that the changes are also updated in Firebase.</p> <pre><code>NagwaRenderingEngine.updateScreen('SCREEN_ID');\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#changetooltool","title":"changeTool(tool)","text":"<p>To update the currently active tool or pen with a new color, size, or type and start using it inside the app view, call this function. The function takes an object as a parameter that may contain any of these three properties:</p> <ul> <li><code>color</code>: pass a string with the color of the pen you want to apply.</li> <li><code>strokeWidth</code>:pass a number the with stroke size of the pen you want to apply.</li> <li><code>type</code>: pass the type of pen you need whether <code>Draw</code>, <code>DeletePart</code>, or <code>Normal</code>.</li> </ul> <p>Note: To update the pen color, you can call the <code>changeTool</code> function with an object that has the color property, whether it's specified as a hexadecimal value or a color name.</p> <pre><code>NagwaRenderingEngine.changeTool({ color: 'red' });\n</code></pre> <pre><code>NagwaRenderingEngine.changeTool({ color: '#a83232' });\n</code></pre> <p>Note: To update the pen size (stroke), you can call the <code>changeTool</code> function with an object that has the <code>strokeWidth</code> property.</p> <pre><code>NagwaRenderingEngine.changeTool({ strokeWidth: 3 });\n</code></pre> <p>Note: To update the pen type, you can call the <code>changeTool</code> function with an object that has the type property. The <code>type</code> property should be set to one of the three values:</p> <ul> <li><code>Draw</code>: For the draw pen type.</li> <li><code>DeletePart</code>: For the erase object pen type used to delete entire paths or objects.</li> <li><code>Normal</code>: For the normal pen mode, where you can have your default cursor and perform regular actions like clicking to solve a question.</li> </ul> <p>Here's an example snippet that demonstrates how to switch to erase object mode (delete mode) for deleting paths using the <code>changeTool</code> function</p> <pre><code>NagwaRenderingEngine.changeTool({ type: 'DeletePart' });\n</code></pre> <p>You have the option to send multiple properties at the same time as follows:</p> <pre><code>NagwaRenderingEngine.changeTool({\ncolor: 'red',\nstrokeWidth: 3,\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#undo","title":"undo()","text":"<p>The undo() function allows you to perform an undo action for your last action and remove it. Within the application, we maintain an undo stack that keeps track of all user actions during the current session, enabling you to perform multiple undo actions as needed. By calling the undo() function, you can effortlessly revert the most recent action and continue undoing previous actions if necessary.</p> <pre><code>NagwaRenderingEngine.undo();\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#redo","title":"redo()","text":"<p>The redo() function enables you to redo your last undo action and retrieve it. With the help of our redo stack, which tracks all your undo actions during the current session, you can perform multiple redo actions as needed. Restoring changes that were previously undone becomes effortless,</p> <pre><code>NagwaRenderingEngine.redo();\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#handling-redo-and-undo-stack-empty-status","title":"Handling Redo and Undo Stack Empty Status","text":"<p>In addition to the <code>undo()</code> and <code>redo()</code> functions, The engine fires a message to notify you when the undo or redo stack becomes empty. These messages trigger the <code>historyStatusUpdated</code> event, allowing you to update your view accordingly. For more detailed information on how to handle these events, please refer to the events section.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#clearscreen","title":"clearScreen()","text":"<p>To clear the entire current screen view, simply call the <code>clearScreen()</code> function. Important to note that executing this action will remove all content, including drawings and images, from the current screen. Keep in mind that this action is irreversible, and you won't be able to undo it. However, the data will be saved inside Firebase, preserving the previous state of your work. Exercise caution when using this function to avoid accidental loss of data.</p> <pre><code>NagwaRenderingEngine.clearScreen();\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#agorastarted","title":"agoraStarted()","text":"<p>Call this function to send a message indicating that Agora has started to the engine. This action will trigger the <code>agoraStarted</code> message.</p> <pre><code>NagwaRenderingEngine.agoraStarted();\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#updatechatstatusstatus","title":"updateChatStatus(status)","text":"<p>Use this function if you want to update the chat status and enable or disable it, By calling this function with <code>false</code>, you can disable the chat feature, and with <code>true</code>, you can enable it again.</p> <pre><code>NagwaRenderingEngine.updateChatStatus(false); // will disable the chat\n</code></pre> <pre><code>NagwaRenderingEngine.updateChatStatus(true); // will enable the chat\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#updatecurrentquestionaskingstatus","title":"updateCurrentQuestionAskingStatus","text":"<p>Use This function if you want to update the current question status to be whether <code>Initial</code>, <code>In_Progress</code>, or <code>Time_Is_Up</code></p> <p>When <code>current_question_asking_status</code> is set to <code>In_Progress</code>, the student will be able to scroll and can submit the question answer once. However, when <code>current_question_asking_status</code> is set to <code>Time_Is_Up</code>, the student won't be able to scroll or submit the answer anymore, indicating that the time limit for the activity has expired. This function allows you to control the time-limited behavior of the application as required.</p> <pre><code>NagwaRenderingEngine.updateCurrentQuestionAskingStatus('Initial');\n</code></pre> <pre><code>NagwaRenderingEngine.updateCurrentQuestionAskingStatus('In_Progress');\n</code></pre> <pre><code>NagwaRenderingEngine.updateCurrentQuestionAskingStatus('Time_Is_Up');\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#engine-events","title":"Engine Events","text":"<p>The engine offers various events to listen to for custom actions and view updates. These events empower you to interact with the engine, respond to changes, update the view and enhance the user experience.</p>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#engineloaded","title":"engineLoaded","text":"<p>This event will be fired when the engine is fully loaded and ready for use. It serves as an indication that all necessary components have been initialized, and you can now start interacting with the engine and its functionalities.</p> <pre><code>window.addEventListener('message', message =&gt; {\nconst data = JSON.parse(message.data);\nif (data.messageKey === 'engineLoaded') {\n// do your action here\n}\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#currentscreenupdated","title":"currentScreenUpdated","text":"<p>This event will be fired whenever the current screen receives new data from Firebase and is updated accordingly. This event serves as a notification that the screen content has changed, allowing you to synchronize your view with the latest data received from the Firebase.</p> <pre><code>window.addEventListener('message', message =&gt; {\nconst data = JSON.parse(message.data);\nif (data.messageKey === 'currentScreenUpdated') {\nconsole.log(data.screenID);\n// do your action here\n}\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#interactionupdated","title":"interactionUpdated","text":"<p>This event will be fired when the current screen receives new interaction data from Firebase. Use this event to update your view and provide an interactive user experience.</p> <pre><code>window.addEventListener('message', message =&gt; {\nconst data = JSON.parse(message.data);\nif (data.messageKey === 'interactionUpdated') {\nconsole.log(\ndata.interactions.original,\ndata.interactions.formatedInteractions,\ndata.currentScreen,\ndata.questionID,\ndata.questionType, // aggregated_all_possible_answers, aggregated_only_student_answers, separated\ndata.choices, // if aggregated_all_possible_answers will contain all choices\ndata.correctAnswers\n);\n// do your action here\n}\n});\n</code></pre> <p>Example of the output object if the question type is <code>aggregated_all_possible_answers</code> or <code>aggregated_only_student_answers</code>:</p> <pre><code>{\n\"currentScreen\": \"4\",\n\"questionID\": \"245178050680.2\",\n\"questionType\": \"aggregated_all_possible_answers\",\n\"choices\": [\"\u0623\", \"\u0628\", \"\u062c\", \"\u062f\"],\n\"totalInteractions\": 1,\n\"interactions\": [\n{\n\"count\": 1,\n\"percentage\": 100,\n\"answer\": \"\u0623\"\n},\n{\n\"count\": 0,\n\"percentage\": 0,\n\"answer\": \"\u0628\"\n},\n{\n\"count\": 0,\n\"percentage\": 0,\n\"answer\": \"\u062c\"\n},\n{\n\"count\": 0,\n\"percentage\": 0,\n\"answer\": \"\u062f\"\n}\n],\n\"correctAnswers\": [], // always empty array (for now :D)\n\"currentStudentAnswer: \"\u0623\", // or null if the student didn't answer\n    \"messageKey\": \"interactionUpdated\"\n}\n</code></pre> <p>Example of the output object if the question type is <code>separated</code>:</p> <pre><code>{\n\"currentScreen\": \"9\",\n\"questionID\": \"363128187320\",\n\"questionType\": \"separated\",\n\"choices\": [], // seperated questions don't have choices\n\"totalInteractions\": 1,\n\"interactions\": [\n{\n\"answer\": \"43242\",\n\"studentID\": \"111111111111\",\n\"studnetName\": \"the educator\"\n}\n],\n\"correctAnswers\": [], // always empty array (for now :D)\n\"currentStudentAnswer: \"43242\", // or null if the student didn't answer\n    \"messageKey\": \"interactionUpdated\"\n}\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#drawingtoolsupdated","title":"drawingToolsUpdated","text":"<p>This event is fired when the current screen receives new drawing tools data from Firebase.</p> <pre><code>window.addEventListener('message', message =&gt; {\nconst data = JSON.parse(message.data);\nif (data.messageKey === 'drawingToolsUpdated') {\nconsole.log(data.mode, data.color, data.stroke);\n// do your action here\n}\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#questionaskingstatusupdated","title":"questionAskingStatusUpdated","text":"<p>This event will be fired when the <code>questionAskingStatus</code> status is updated.</p> <pre><code>window.addEventListener('message', message =&gt; {\nconst data = JSON.parse(message.data);\nif (data.messageKey === 'questionAskingStatusUpdated') {\nconsole.log(data.questionAskingStatus);\n// values of questionAskingStatus is `Initial`, `In_Progress`, or `Time_Is_Up`\n// do your action here\n}\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#agorastarted_1","title":"agoraStarted","text":"<p>This event will be fired when the Agora starts.</p> <pre><code>window.addEventListener('message', message =&gt; {\nconst data = JSON.parse(message.data);\nif (data.messageKey === 'agoraStarted') {\n// do your action here\n}\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#chatstatusupdated","title":"chatStatusUpdated","text":"<p>This event will be fired when the chat status is updated.</p> <pre><code>window.addEventListener('message', message =&gt; {\nconst data = JSON.parse(message.data);\nif (data.messageKey === 'chatStatusUpdated') {\nconsole.log(data.isChatEnabled);\n// do your action here\n}\n});\n</code></pre>"},{"location":"nagwa_sessions/pre_knowledge_required/js_html_renderingEngine/#historystatusupdated","title":"historyStatusUpdated","text":"<p>This event will be fired when the history status is updated.</p> <ul> <li><code>isUndoStackEmpty</code>: indicates whether the undo stack is empty or not.</li> <li><code>isRedoStackEmpty</code>: indicates whether the redo stack is empty or not.</li> <li><code>isScreenEmpty</code>: indicates whether the current screen is empty or not.</li> </ul> <pre><code>window.addEventListener('message', message =&gt; {\nconst data = JSON.parse(message.data);\nif (data.messageKey === 'historyStatusUpdated') {\nconsole.log(data.isUndoStackEmpty, data.isRedoStackEmpty, data.isScreenEmpty);\n// do your action here\n}\n});\n</code></pre>"},{"location":"sabboura/","title":"Sabboura","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/proposal/","title":"Proposal","text":""}]}